// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`apigw.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {
    "SimpleValue" => Object {
      "conditionName": undefined,
      "description": "Sample primitive output value",
      "exportName": Object {
        "type": "string",
        "value": "SimpleValueExportName",
      },
      "value": Object {
        "type": "string",
        "value": "SimpleValue",
      },
    },
  },
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "HelloLambda" => Set {},
      "MyApi" => Set {
        "HelloLambda",
      },
      "GetRoot" => Set {
        "MyApi",
      },
    },
    "keys": Set {
      "HelloLambda",
      "MyApi",
      "GetRoot",
    },
    "nodes": Object {
      "GetRoot": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_apigateway.Method",
        "logicalId": "GetRoot",
        "namespace": "aws_apigateway",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "httpMethod": Object {
              "type": "string",
              "value": "GET",
            },
            "resource": Object {
              "reference": Object {
                "fn": "getProp",
                "logicalId": "MyApi",
                "property": "root",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "HelloLambda": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "HelloLambda",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "code": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "examples/lambda-handler",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_lambda.Code",
              "method": "fromAsset",
              "namespace": "aws_lambda",
              "type": "staticMethodCall",
            },
            "handler": Object {
              "type": "string",
              "value": "index.handler",
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "PYTHON_3_6",
              "type": "staticProperty",
            },
          },
          "type": "struct",
        },
        "tags": Array [
          Object {
            "key": "category",
            "value": "ecommerce",
          },
        ],
        "type": "construct",
      },
      "MyApi": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_apigateway.LambdaRestApi",
        "logicalId": "MyApi",
        "namespace": "aws_apigateway",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "handler": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "HelloLambda",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": "A template creates a lambda function with an api gateway",
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {
      "SimpleValue" => Object {
        "conditionName": undefined,
        "description": "Sample primitive output value",
        "exportName": Object {
          "type": "string",
          "value": "SimpleValueExportName",
        },
        "value": Object {
          "type": "string",
          "value": "SimpleValue",
        },
      },
    },
    "parameters": Map {},
    "resources": Map {
      "HelloLambda" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "code": Object {
            "fields": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": Object {
                "type": "string",
                "value": "examples/lambda-handler",
              },
            },
            "type": "object",
          },
          "handler": Object {
            "type": "string",
            "value": "index.handler",
          },
          "runtime": Object {
            "type": "string",
            "value": "PYTHON_3_6",
          },
        },
        "tags": Array [
          Object {
            "key": "category",
            "value": "ecommerce",
          },
        ],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "MyApi" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "HelloLambda",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "handler": Object {
            "fn": "ref",
            "logicalId": "HelloLambda",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_apigateway.LambdaRestApi",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "GetRoot" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "MyApi",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "httpMethod": Object {
            "type": "string",
            "value": "GET",
          },
          "resource": Object {
            "fn": "getProp",
            "logicalId": "MyApi",
            "property": "root",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_apigateway.Method",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "A template creates a lambda function with an api gateway",
      "Outputs": Object {
        "SimpleValue": Object {
          "Description": "Sample primitive output value",
          "Export": Object {
            "Name": "SimpleValueExportName",
          },
          "Value": "SimpleValue",
        },
      },
      "Resources": Object {
        "GetRoot": Object {
          "Properties": Object {
            "httpMethod": "GET",
            "resource": Object {
              "CDK::GetProp": "MyApi.root",
            },
          },
          "Type": "aws-cdk-lib.aws_apigateway.Method",
        },
        "HelloLambda": Object {
          "Properties": Object {
            "code": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": "examples/lambda-handler",
            },
            "handler": "index.handler",
            "runtime": "PYTHON_3_6",
          },
          "Tags": Array [
            Object {
              "Key": "category",
              "Value": "ecommerce",
            },
          ],
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
        "MyApi": Object {
          "Properties": Object {
            "handler": Object {
              "Ref": "HelloLambda",
            },
          },
          "Type": "aws-cdk-lib.aws_apigateway.LambdaRestApi",
        },
      },
    },
    "templateFormatVersion": "2010-09-09",
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`application-load-balancer.yaml 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "VPC" => Set {},
      "ASG" => Set {
        "VPC",
      },
      "AModestLoad" => Set {
        "Target",
        "ASG",
      },
      "LB" => Set {
        "VPC",
      },
      "Listener" => Set {
        "LB",
      },
      "Target" => Set {
        "Listener",
        "ASG",
      },
      "AllowFromEverywhere" => Set {
        "Listener",
      },
    },
    "keys": Set {
      "VPC",
      "ASG",
      "LB",
      "Listener",
      "Target",
      "AllowFromEverywhere",
      "AModestLoad",
    },
    "nodes": Object {
      "AModestLoad": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "string",
                "value": "AModestLoad",
              },
              Object {
                "fields": Object {
                  "targetRequestsPerMinute": Object {
                    "type": "number",
                    "value": 60,
                  },
                },
                "type": "struct",
              },
            ],
            "type": "array",
          },
          "logicalId": "ASG",
          "method": "scaleOnRequestCount",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [
          "Target",
        ],
        "logicalId": "AModestLoad",
        "namespace": "aws_autoscaling",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "ASG": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup",
        "logicalId": "ASG",
        "namespace": "aws_autoscaling",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "instanceType": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "choice": "T2",
                    "fqn": "aws-cdk-lib.aws_ec2.InstanceClass",
                    "namespace": "aws_ec2",
                    "type": "enum",
                  },
                  Object {
                    "choice": "MICRO",
                    "fqn": "aws-cdk-lib.aws_ec2.InstanceSize",
                    "namespace": "aws_ec2",
                    "type": "enum",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_ec2.InstanceType",
              "method": "of",
              "namespace": "aws_ec2",
              "type": "staticMethodCall",
            },
            "machineImage": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_ec2.AmazonLinuxImage",
              "namespace": "aws_ec2",
              "type": "initializer",
            },
            "vpc": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "VPC",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "AllowFromEverywhere": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "string",
                "value": "Open to the world",
              },
            ],
            "type": "array",
          },
          "logicalId": "Listener",
          "method": "connections.allowDefaultPortFromAnyIpv4",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "AllowFromEverywhere",
        "namespace": undefined,
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "LB": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer",
        "logicalId": "LB",
        "namespace": "aws_elasticloadbalancingv2",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "internetFacing": Object {
              "type": "boolean",
              "value": true,
            },
            "vpc": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "VPC",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Listener": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "string",
                "value": "Listener",
              },
              Object {
                "fields": Object {
                  "port": Object {
                    "type": "number",
                    "value": 80,
                  },
                },
                "type": "struct",
              },
            ],
            "type": "array",
          },
          "logicalId": "LB",
          "method": "addListener",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "Listener",
        "namespace": "aws_elasticloadbalancingv2",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "Target": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "string",
                "value": "Target",
              },
              Object {
                "fields": Object {
                  "port": Object {
                    "type": "number",
                    "value": 80,
                  },
                  "targets": Object {
                    "array": Array [
                      Object {
                        "reference": Object {
                          "fn": "ref",
                          "logicalId": "ASG",
                          "type": "intrinsic",
                        },
                        "type": "resolve-reference",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "struct",
              },
            ],
            "type": "array",
          },
          "logicalId": "Listener",
          "method": "addTargets",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "Target",
        "namespace": "aws_elasticloadbalancingv2",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "VPC": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_ec2.Vpc",
        "logicalId": "VPC",
        "namespace": "aws_ec2",
        "overrides": Array [],
        "props": Object {
          "fields": Object {},
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "VPC" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_ec2.Vpc",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "ASG" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "VPC",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "instanceType": Object {
            "fields": Object {
              "aws-cdk-lib.aws_ec2.InstanceType.of": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "T2",
                  },
                  Object {
                    "type": "string",
                    "value": "MICRO",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
          "machineImage": Object {
            "fields": Object {
              "aws-cdk-lib.aws_ec2.AmazonLinuxImage": Object {
                "type": "null",
              },
            },
            "type": "object",
          },
          "vpc": Object {
            "fn": "ref",
            "logicalId": "VPC",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "AModestLoad" => Object {
        "call": Object {
          "fields": Object {
            "scaleOnRequestCount": Object {
              "array": Array [
                Object {
                  "type": "string",
                  "value": "AModestLoad",
                },
                Object {
                  "fields": Object {
                    "targetRequestsPerMinute": Object {
                      "type": "number",
                      "value": 60,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "array",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Target",
          "ASG",
        },
        "dependsOn": Set {
          "Target",
        },
        "metadata": Object {},
        "on": "ASG",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_autoscaling.TargetTrackingScalingPolicy",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "LB" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "VPC",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "internetFacing": Object {
            "type": "boolean",
            "value": true,
          },
          "vpc": Object {
            "fn": "ref",
            "logicalId": "VPC",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Listener" => Object {
        "call": Object {
          "fields": Object {
            "addListener": Object {
              "array": Array [
                Object {
                  "type": "string",
                  "value": "Listener",
                },
                Object {
                  "fields": Object {
                    "port": Object {
                      "type": "number",
                      "value": 80,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "array",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "LB",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "LB",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Target" => Object {
        "call": Object {
          "fields": Object {
            "addTargets": Object {
              "array": Array [
                Object {
                  "type": "string",
                  "value": "Target",
                },
                Object {
                  "fields": Object {
                    "port": Object {
                      "type": "number",
                      "value": 80,
                    },
                    "targets": Object {
                      "array": Array [
                        Object {
                          "fn": "ref",
                          "logicalId": "ASG",
                          "type": "intrinsic",
                        },
                      ],
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "array",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Listener",
          "ASG",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "Listener",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationTargetGroup",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "AllowFromEverywhere" => Object {
        "call": Object {
          "fields": Object {
            "connections.allowDefaultPortFromAnyIpv4": Object {
              "array": Array [
                Object {
                  "type": "string",
                  "value": "Open to the world",
                },
              ],
              "type": "array",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Listener",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "Listener",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": undefined,
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "Resources": Object {
        "AModestLoad": Object {
          "Call": Object {
            "scaleOnRequestCount": Array [
              "AModestLoad",
              Object {
                "targetRequestsPerMinute": 60,
              },
            ],
          },
          "DependsOn": Array [
            "Target",
          ],
          "On": "ASG",
          "Type": "aws-cdk-lib.aws_autoscaling.TargetTrackingScalingPolicy",
        },
        "ASG": Object {
          "Properties": Object {
            "instanceType": Object {
              "aws-cdk-lib.aws_ec2.InstanceType.of": Array [
                "T2",
                "MICRO",
              ],
            },
            "machineImage": Object {
              "aws-cdk-lib.aws_ec2.AmazonLinuxImage": null,
            },
            "vpc": Object {
              "Ref": "VPC",
            },
          },
          "Type": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup",
        },
        "AllowFromEverywhere": Object {
          "Call": Object {
            "connections.allowDefaultPortFromAnyIpv4": Array [
              "Open to the world",
            ],
          },
          "On": "Listener",
        },
        "LB": Object {
          "Properties": Object {
            "internetFacing": true,
            "vpc": Object {
              "Ref": "VPC",
            },
          },
          "Type": "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer",
        },
        "Listener": Object {
          "Call": Object {
            "addListener": Array [
              "Listener",
              Object {
                "port": 80,
              },
            ],
          },
          "On": "LB",
          "Type": "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener",
        },
        "Target": Object {
          "Call": Object {
            "addTargets": Array [
              "Target",
              Object {
                "port": 80,
                "targets": Array [
                  Object {
                    "Ref": "ASG",
                  },
                ],
              },
            ],
          },
          "On": "Listener",
          "Type": "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationTargetGroup",
        },
        "VPC": Object {
          "Type": "aws-cdk-lib.aws_ec2.Vpc",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`bucket-with-parameters.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {
    "BucketName" => Object {
      "allowedPattern": "^[a-zA-Z0-9]*$",
      "allowedValues": undefined,
      "constraintDescription": "a string consisting only of alphanumeric characters",
      "default": "MyS3Bucket",
      "description": "The name of your bucket",
      "maxLength": 10,
      "maxValue": undefined,
      "minLength": 1,
      "minValue": undefined,
      "noEcho": true,
      "type": "String",
    },
    "CorsMaxAge" => Object {
      "allowedPattern": undefined,
      "allowedValues": Array [
        1,
        2,
        3,
        10,
        100,
        300,
        "nonsense-string-value",
      ],
      "constraintDescription": undefined,
      "default": "3",
      "description": "the time in seconds that a browser will cache the preflight response",
      "maxLength": undefined,
      "maxValue": 300,
      "minLength": undefined,
      "minValue": 0,
      "noEcho": true,
      "type": "Number",
    },
  },
  "resources": DependencyGraph {
    "_dependencies": Map {
      "Bucket" => Set {},
    },
    "keys": Set {
      "Bucket",
    },
    "nodes": Object {
      "Bucket": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_s3.Bucket",
        "logicalId": "Bucket",
        "namespace": "aws_s3",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "bucketName": Object {
              "fn": "ref",
              "logicalId": "BucketName",
              "type": "intrinsic",
            },
            "cors": Object {
              "array": Array [
                Object {
                  "fields": Object {
                    "allowedMethods": Object {
                      "array": Array [
                        Object {
                          "choice": "GET",
                          "fqn": "aws-cdk-lib.aws_s3.HttpMethods",
                          "namespace": "aws_s3",
                          "type": "enum",
                        },
                        Object {
                          "choice": "POST",
                          "fqn": "aws-cdk-lib.aws_s3.HttpMethods",
                          "namespace": "aws_s3",
                          "type": "enum",
                        },
                      ],
                      "type": "array",
                    },
                    "allowedOrigins": Object {
                      "array": Array [
                        Object {
                          "type": "string",
                          "value": "origin1",
                        },
                        Object {
                          "type": "string",
                          "value": "origin2",
                        },
                      ],
                      "type": "array",
                    },
                    "maxAge": Object {
                      "fn": "ref",
                      "logicalId": "CorsMaxAge",
                      "type": "intrinsic",
                    },
                  },
                  "type": "struct",
                },
              ],
              "type": "array",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {
      "BucketName" => Object {
        "allowedPattern": "^[a-zA-Z0-9]*$",
        "allowedValues": undefined,
        "constraintDescription": "a string consisting only of alphanumeric characters",
        "default": "MyS3Bucket",
        "description": "The name of your bucket",
        "maxLength": 10,
        "maxValue": undefined,
        "minLength": 1,
        "minValue": undefined,
        "noEcho": true,
        "type": "String",
      },
      "CorsMaxAge" => Object {
        "allowedPattern": undefined,
        "allowedValues": Array [
          1,
          2,
          3,
          10,
          100,
          300,
          "nonsense-string-value",
        ],
        "constraintDescription": undefined,
        "default": "3",
        "description": "the time in seconds that a browser will cache the preflight response",
        "maxLength": undefined,
        "maxValue": 300,
        "minLength": undefined,
        "minValue": 0,
        "noEcho": true,
        "type": "Number",
      },
    },
    "resources": Map {
      "Bucket" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "BucketName",
          "CorsMaxAge",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "bucketName": Object {
            "fn": "ref",
            "logicalId": "BucketName",
            "type": "intrinsic",
          },
          "cors": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "allowedMethods": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "GET",
                      },
                      Object {
                        "type": "string",
                        "value": "POST",
                      },
                    ],
                    "type": "array",
                  },
                  "allowedOrigins": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "origin1",
                      },
                      Object {
                        "type": "string",
                        "value": "origin2",
                      },
                    ],
                    "type": "array",
                  },
                  "maxAge": Object {
                    "fn": "ref",
                    "logicalId": "CorsMaxAge",
                    "type": "intrinsic",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_s3.Bucket",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "Parameters": Object {
        "BucketName": Object {
          "AllowedPattern": "^[a-zA-Z0-9]*$",
          "ConstraintDescription": "a string consisting only of alphanumeric characters",
          "Default": "MyS3Bucket",
          "Description": "The name of your bucket",
          "MaxLength": 10,
          "MinLength": 1,
          "NoEcho": true,
          "Type": "String",
        },
        "CorsMaxAge": Object {
          "AllowedValues": Array [
            1,
            2,
            3,
            10,
            100,
            300,
            "nonsense-string-value",
          ],
          "Default": "3",
          "Description": "the time in seconds that a browser will cache the preflight response",
          "MaxValue": "300",
          "MinValue": "0",
          "NoEcho": true,
          "Type": "Number",
        },
      },
      "Resources": Object {
        "Bucket": Object {
          "Properties": Object {
            "bucketName": Object {
              "Ref": "BucketName",
            },
            "cors": Array [
              Object {
                "allowedMethods": Array [
                  "GET",
                  "POST",
                ],
                "allowedOrigins": Array [
                  "origin1",
                  "origin2",
                ],
                "maxAge": Object {
                  "Ref": "CorsMaxAge",
                },
              },
            ],
          },
          "Type": "aws-cdk-lib.aws_s3.Bucket",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`cfn-policies.yaml 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "AutoScalingGroup" => Set {
        "LaunchConfig",
      },
      "LaunchConfig" => Set {},
    },
    "keys": Set {
      "LaunchConfig",
      "AutoScalingGroup",
    },
    "nodes": Object {
      "AutoScalingGroup": Object {
        "creationPolicy": Object {
          "autoScalingCreationPolicy": Object {
            "minSuccessfulInstancesPercent": 50,
          },
          "resourceSignal": Object {
            "count": 3,
            "timeout": "PT15M",
          },
        },
        "deletionPolicy": "Delete",
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.CfnResource",
        "logicalId": "AutoScalingGroup",
        "metadata": Object {},
        "namespace": undefined,
        "props": Object {
          "fields": Object {
            "properties": Object {
              "fields": Object {
                "AvailabilityZones": Object {
                  "type": "any",
                  "value": Object {
                    "fn": "getAzs",
                    "region": Object {
                      "type": "string",
                      "value": "",
                    },
                    "type": "intrinsic",
                  },
                },
                "DesiredCapacity": Object {
                  "type": "any",
                  "value": Object {
                    "type": "string",
                    "value": "3",
                  },
                },
                "LaunchConfigurationName": Object {
                  "type": "any",
                  "value": Object {
                    "fn": "ref",
                    "logicalId": "LaunchConfig",
                    "type": "intrinsic",
                  },
                },
                "MaxSize": Object {
                  "type": "any",
                  "value": Object {
                    "type": "string",
                    "value": "4",
                  },
                },
                "MinSize": Object {
                  "type": "any",
                  "value": Object {
                    "type": "string",
                    "value": "1",
                  },
                },
              },
              "type": "object",
            },
            "type": Object {
              "type": "string",
              "value": "AWS::AutoScaling::AutoScalingGroup",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "resource",
        "updatePolicy": Object {
          "autoScalingReplacingUpdate": Object {
            "willReplace": false,
          },
          "autoScalingRollingUpdate": Object {
            "maxBatchSize": 3,
            "minInstancesInService": 5,
            "minSuccessfulInstancesPercent": 42,
            "pauseTime": "PT10M",
            "suspendProcesses": Array [
              "Launch",
              "Terminate",
            ],
            "waitOnResourceSignals": true,
          },
          "autoScalingScheduledAction": Object {
            "ignoreUnmodifiedGroupSizeProperties": true,
          },
          "codeDeployLambdaAliasUpdate": Object {
            "afterAllowTrafficHook": "SomeFunction",
            "applicationName": "SomeApp",
            "beforeAllowTrafficHook": "AnotherFunction",
            "deploymentGroupName": "SomeGroup",
          },
          "enableVersionUpgrade": false,
          "useOnlineResharding": true,
        },
        "updateReplacePolicy": "Retain",
      },
      "LaunchConfig": Object {
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.CfnResource",
        "logicalId": "LaunchConfig",
        "metadata": Object {
          "Object1": "Location1",
          "Object2": "Location2",
        },
        "namespace": undefined,
        "props": Object {
          "fields": Object {
            "properties": Object {
              "fields": Object {
                "ImageId": Object {
                  "type": "any",
                  "value": Object {
                    "type": "string",
                    "value": "ami-16d18a7e",
                  },
                },
                "InstanceType": Object {
                  "type": "any",
                  "value": Object {
                    "type": "string",
                    "value": "t2.micro",
                  },
                },
                "UserData": Object {
                  "type": "any",
                  "value": Object {
                    "expression": Object {
                      "additionalContext": Object {},
                      "fn": "sub",
                      "fragments": Array [
                        Object {
                          "content": "#!/bin/bash -xe
yum update -y aws-cfn-bootstrap
/opt/aws/bin/cfn-signal -e $? --stack ",
                          "type": "literal",
                        },
                        Object {
                          "logicalId": "AWS::StackName",
                          "type": "ref",
                        },
                        Object {
                          "content": " --resource AutoScalingGroup --region ",
                          "type": "literal",
                        },
                        Object {
                          "logicalId": "AWS::Region",
                          "type": "ref",
                        },
                        Object {
                          "content": "
",
                          "type": "literal",
                        },
                      ],
                      "type": "intrinsic",
                    },
                    "fn": "base64",
                    "type": "intrinsic",
                  },
                },
              },
              "type": "object",
            },
            "type": Object {
              "type": "string",
              "value": "AWS::AutoScaling::LaunchConfiguration",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "resource",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "AutoScalingGroup" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": Object {
          "autoScalingCreationPolicy": Object {
            "minSuccessfulInstancesPercent": 50,
          },
          "resourceSignal": Object {
            "count": 3,
            "timeout": "PT15M",
          },
        },
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "LaunchConfig",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "AvailabilityZones": Object {
            "fn": "getAzs",
            "region": Object {
              "type": "string",
              "value": "",
            },
            "type": "intrinsic",
          },
          "DesiredCapacity": Object {
            "type": "string",
            "value": "3",
          },
          "LaunchConfigurationName": Object {
            "fn": "ref",
            "logicalId": "LaunchConfig",
            "type": "intrinsic",
          },
          "MaxSize": Object {
            "type": "string",
            "value": "4",
          },
          "MinSize": Object {
            "type": "string",
            "value": "1",
          },
        },
        "tags": Array [],
        "type": "AWS::AutoScaling::AutoScalingGroup",
        "updatePolicy": Object {
          "autoScalingReplacingUpdate": Object {
            "willReplace": false,
          },
          "autoScalingRollingUpdate": Object {
            "maxBatchSize": 3,
            "minInstancesInService": 5,
            "minSuccessfulInstancesPercent": 42,
            "pauseTime": "PT10M",
            "suspendProcesses": Array [
              "Launch",
              "Terminate",
            ],
            "waitOnResourceSignals": true,
          },
          "autoScalingScheduledAction": Object {
            "ignoreUnmodifiedGroupSizeProperties": true,
          },
          "codeDeployLambdaAliasUpdate": Object {
            "afterAllowTrafficHook": "SomeFunction",
            "applicationName": "SomeApp",
            "beforeAllowTrafficHook": "AnotherFunction",
            "deploymentGroupName": "SomeGroup",
          },
          "enableVersionUpgrade": false,
          "useOnlineResharding": true,
        },
        "updateReplacePolicy": "Retain",
      },
      "LaunchConfig" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {
          "Object1": "Location1",
          "Object2": "Location2",
        },
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "ImageId": Object {
            "type": "string",
            "value": "ami-16d18a7e",
          },
          "InstanceType": Object {
            "type": "string",
            "value": "t2.micro",
          },
          "UserData": Object {
            "expression": Object {
              "additionalContext": Object {},
              "fn": "sub",
              "fragments": Array [
                Object {
                  "content": "#!/bin/bash -xe
yum update -y aws-cfn-bootstrap
/opt/aws/bin/cfn-signal -e $? --stack ",
                  "type": "literal",
                },
                Object {
                  "logicalId": "AWS::StackName",
                  "type": "ref",
                },
                Object {
                  "content": " --resource AutoScalingGroup --region ",
                  "type": "literal",
                },
                Object {
                  "logicalId": "AWS::Region",
                  "type": "ref",
                },
                Object {
                  "content": "
",
                  "type": "literal",
                },
              ],
              "type": "intrinsic",
            },
            "fn": "base64",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "AWS::AutoScaling::LaunchConfiguration",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "Resources": Object {
        "AutoScalingGroup": Object {
          "CreationPolicy": Object {
            "AutoScalingCreationPolicy": Object {
              "MinSuccessfulInstancesPercent": 50,
            },
            "ResourceSignal": Object {
              "Count": "3",
              "Timeout": "PT15M",
            },
          },
          "DeletionPolicy": "Delete",
          "Properties": Object {
            "AvailabilityZones": Object {
              "Fn::GetAZs": "",
            },
            "DesiredCapacity": "3",
            "LaunchConfigurationName": Object {
              "Ref": "LaunchConfig",
            },
            "MaxSize": "4",
            "MinSize": "1",
          },
          "Type": "AWS::AutoScaling::AutoScalingGroup",
          "UpdatePolicy": Object {
            "AutoScalingReplacingUpdate": Object {
              "WillReplace": false,
            },
            "AutoScalingRollingUpdate": Object {
              "MaxBatchSize": 3,
              "MinInstancesInService": 5,
              "MinSuccessfulInstancesPercent": 42,
              "PauseTime": "PT10M",
              "SuspendProcesses": Array [
                "Launch",
                "Terminate",
              ],
              "WaitOnResourceSignals": true,
            },
            "AutoScalingScheduledAction": Object {
              "IgnoreUnmodifiedGroupSizeProperties": true,
            },
            "CodeDeployLambdaAliasUpdate": Object {
              "AfterAllowTrafficHook": "SomeFunction",
              "ApplicationName": "SomeApp",
              "BeforeAllowTrafficHook": "AnotherFunction",
              "DeploymentGroupName": "SomeGroup",
            },
            "EnableVersionUpgrade": false,
            "UseOnlineResharding": true,
          },
          "UpdateReplacePolicy": "Retain",
        },
        "LaunchConfig": Object {
          "Metadata": Object {
            "Object1": "Location1",
            "Object2": "Location2",
          },
          "Properties": Object {
            "ImageId": "ami-16d18a7e",
            "InstanceType": "t2.micro",
            "UserData": Object {
              "Fn::Base64": Object {
                "Fn::Sub": "#!/bin/bash -xe
yum update -y aws-cfn-bootstrap
/opt/aws/bin/cfn-signal -e $? --stack \${AWS::StackName} --resource AutoScalingGroup --region \${AWS::Region}
",
              },
            },
          },
          "Type": "AWS::AutoScaling::LaunchConfiguration",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`ec2-instance.yaml 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {
    "RegionMap" => TemplateMapping {
      "mapping": Map {
        "us-west-1" => Map {
          "HVM64" => "ami-0bdb828fd58c52235",
          "HVMG2" => "ami-066ee5fd4a9ef77f1",
        },
        "eu-west-1" => Map {
          "HVM64" => "ami-047bb4163c506cd98",
          "HVMG2" => "ami-0a7c483d527806435",
        },
      },
    },
  },
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "myEC2Instance" => Set {},
    },
    "keys": Set {
      "myEC2Instance",
    },
    "nodes": Object {
      "myEC2Instance": Object {
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.CfnResource",
        "logicalId": "myEC2Instance",
        "metadata": Object {},
        "namespace": undefined,
        "props": Object {
          "fields": Object {
            "properties": Object {
              "fields": Object {
                "ImageId": Object {
                  "type": "any",
                  "value": Object {
                    "fn": "findInMap",
                    "key1": Object {
                      "fn": "ref",
                      "logicalId": "AWS::Region",
                      "type": "intrinsic",
                    },
                    "key2": Object {
                      "type": "string",
                      "value": "HVM64",
                    },
                    "mappingName": "RegionMap",
                    "type": "intrinsic",
                  },
                },
                "InstanceType": Object {
                  "type": "any",
                  "value": Object {
                    "type": "string",
                    "value": "m1.small",
                  },
                },
              },
              "type": "object",
            },
            "type": Object {
              "type": "string",
              "value": "AWS::EC2::Instance",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "resource",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {
      "RegionMap" => TemplateMapping {
        "mapping": Map {
          "us-west-1" => Map {
            "HVM64" => "ami-0bdb828fd58c52235",
            "HVMG2" => "ami-066ee5fd4a9ef77f1",
          },
          "eu-west-1" => Map {
            "HVM64" => "ami-047bb4163c506cd98",
            "HVMG2" => "ami-0a7c483d527806435",
          },
        },
      },
    },
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "myEC2Instance" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "AWS::Region",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "ImageId": Object {
            "fn": "findInMap",
            "key1": Object {
              "fn": "ref",
              "logicalId": "AWS::Region",
              "type": "intrinsic",
            },
            "key2": Object {
              "type": "string",
              "value": "HVM64",
            },
            "mappingName": "RegionMap",
            "type": "intrinsic",
          },
          "InstanceType": Object {
            "type": "string",
            "value": "m1.small",
          },
        },
        "tags": Array [],
        "type": "AWS::EC2::Instance",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "Mappings": Object {
        "RegionMap": Object {
          "eu-west-1": Object {
            "HVM64": "ami-047bb4163c506cd98",
            "HVMG2": "ami-0a7c483d527806435",
          },
          "us-west-1": Object {
            "HVM64": "ami-0bdb828fd58c52235",
            "HVMG2": "ami-066ee5fd4a9ef77f1",
          },
        },
      },
      "Resources": Object {
        "myEC2Instance": Object {
          "Properties": Object {
            "ImageId": Object {
              "Fn::FindInMap": Array [
                "RegionMap",
                Object {
                  "Ref": "AWS::Region",
                },
                "HVM64",
              ],
            },
            "InstanceType": "m1.small",
          },
          "Type": "AWS::EC2::Instance",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`ecs.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "VPC" => Set {},
      "Cluster" => Set {
        "VPC",
      },
      "MyTaskDef" => Set {},
      "ContainerDef" => Set {
        "MyTaskDef",
      },
      "Service" => Set {
        "Cluster",
        "MyTaskDef",
      },
    },
    "keys": Set {
      "VPC",
      "MyTaskDef",
      "Cluster",
      "ContainerDef",
      "Service",
    },
    "nodes": Object {
      "Cluster": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_ecs.Cluster",
        "logicalId": "Cluster",
        "namespace": "aws_ecs",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "vpc": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "VPC",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "ContainerDef": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_ecs.ContainerDefinition",
        "logicalId": "ContainerDef",
        "namespace": "aws_ecs",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "essential": Object {
              "type": "boolean",
              "value": true,
            },
            "image": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "redis",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_ecs.ContainerImage",
              "method": "fromRegistry",
              "namespace": "aws_ecs",
              "type": "staticMethodCall",
            },
            "memoryLimitMiB": Object {
              "type": "number",
              "value": 1024,
            },
            "taskDefinition": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "MyTaskDef",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "MyTaskDef": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_ecs.TaskDefinition",
        "logicalId": "MyTaskDef",
        "namespace": "aws_ecs",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "compatibility": Object {
              "choice": "FARGATE",
              "fqn": "aws-cdk-lib.aws_ecs.Compatibility",
              "namespace": "aws_ecs",
              "type": "enum",
            },
            "cpu": Object {
              "type": "string",
              "value": "1024",
            },
            "family": Object {
              "type": "string",
              "value": "redis",
            },
            "memoryMiB": Object {
              "type": "string",
              "value": "1GB",
            },
            "networkMode": Object {
              "choice": "AWS_VPC",
              "fqn": "aws-cdk-lib.aws_ecs.NetworkMode",
              "namespace": "aws_ecs",
              "type": "enum",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Service": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_ecs.FargateService",
        "logicalId": "Service",
        "namespace": "aws_ecs",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "cluster": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "Cluster",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
            "taskDefinition": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "MyTaskDef",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "VPC": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_ec2.Vpc",
        "logicalId": "VPC",
        "namespace": "aws_ec2",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "maxAzs": Object {
              "type": "number",
              "value": 1,
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": "A template creates a Fargate service with necessary resources",
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "VPC" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "maxAzs": Object {
            "type": "number",
            "value": 1,
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_ec2.Vpc",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Cluster" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "VPC",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "vpc": Object {
            "fn": "ref",
            "logicalId": "VPC",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_ecs.Cluster",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "MyTaskDef" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "compatibility": Object {
            "type": "string",
            "value": "FARGATE",
          },
          "cpu": Object {
            "type": "string",
            "value": "1024",
          },
          "family": Object {
            "type": "string",
            "value": "redis",
          },
          "memoryMiB": Object {
            "type": "string",
            "value": "1GB",
          },
          "networkMode": Object {
            "type": "string",
            "value": "AWS_VPC",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_ecs.TaskDefinition",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "ContainerDef" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "MyTaskDef",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "essential": Object {
            "type": "boolean",
            "value": true,
          },
          "image": Object {
            "fields": Object {
              "aws-cdk-lib.aws_ecs.ContainerImage.fromRegistry": Object {
                "type": "string",
                "value": "redis",
              },
            },
            "type": "object",
          },
          "memoryLimitMiB": Object {
            "type": "number",
            "value": 1024,
          },
          "taskDefinition": Object {
            "fn": "ref",
            "logicalId": "MyTaskDef",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_ecs.ContainerDefinition",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Service" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Cluster",
          "MyTaskDef",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "cluster": Object {
            "fn": "ref",
            "logicalId": "Cluster",
            "type": "intrinsic",
          },
          "taskDefinition": Object {
            "fn": "ref",
            "logicalId": "MyTaskDef",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_ecs.FargateService",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "A template creates a Fargate service with necessary resources",
      "Resources": Object {
        "Cluster": Object {
          "Properties": Object {
            "vpc": Object {
              "Ref": "VPC",
            },
          },
          "Type": "aws-cdk-lib.aws_ecs.Cluster",
        },
        "ContainerDef": Object {
          "Properties": Object {
            "essential": true,
            "image": Object {
              "aws-cdk-lib.aws_ecs.ContainerImage.fromRegistry": "redis",
            },
            "memoryLimitMiB": 1024,
            "taskDefinition": Object {
              "Ref": "MyTaskDef",
            },
          },
          "Type": "aws-cdk-lib.aws_ecs.ContainerDefinition",
        },
        "MyTaskDef": Object {
          "Properties": Object {
            "compatibility": "FARGATE",
            "cpu": "1024",
            "family": "redis",
            "memoryMiB": "1GB",
            "networkMode": "AWS_VPC",
          },
          "Type": "aws-cdk-lib.aws_ecs.TaskDefinition",
        },
        "Service": Object {
          "Properties": Object {
            "cluster": Object {
              "Ref": "Cluster",
            },
            "taskDefinition": Object {
              "Ref": "MyTaskDef",
            },
          },
          "Type": "aws-cdk-lib.aws_ecs.FargateService",
        },
        "VPC": Object {
          "Properties": Object {
            "maxAzs": 1,
          },
          "Type": "aws-cdk-lib.aws_ec2.Vpc",
        },
      },
    },
    "templateFormatVersion": "2010-09-09",
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`fleet.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "MyVpc" => Set {},
      "MyFleet" => Set {
        "MyVpc",
      },
    },
    "keys": Set {
      "MyVpc",
      "MyFleet",
    },
    "nodes": Object {
      "MyFleet": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup",
        "logicalId": "MyFleet",
        "namespace": "aws_autoscaling",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "desiredCapacity": Object {
              "type": "number",
              "value": 3,
            },
            "instanceType": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "choice": "T2",
                    "fqn": "aws-cdk-lib.aws_ec2.InstanceClass",
                    "namespace": "aws_ec2",
                    "type": "enum",
                  },
                  Object {
                    "choice": "XLARGE",
                    "fqn": "aws-cdk-lib.aws_ec2.InstanceSize",
                    "namespace": "aws_ec2",
                    "type": "enum",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_ec2.InstanceType",
              "method": "of",
              "namespace": "aws_ec2",
              "type": "staticMethodCall",
            },
            "machineImage": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "void",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_ecs.EcsOptimizedImage",
              "method": "amazonLinux2",
              "namespace": "aws_ecs",
              "type": "staticMethodCall",
            },
            "vpc": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "MyVpc",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "MyVpc": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_ec2.Vpc",
        "logicalId": "MyVpc",
        "namespace": "aws_ec2",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "maxAzs": Object {
              "type": "number",
              "value": 2,
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": "A template creates an ASG and Vpc",
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "MyVpc" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "maxAzs": Object {
            "type": "number",
            "value": 2,
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_ec2.Vpc",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "MyFleet" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "MyVpc",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "desiredCapacity": Object {
            "type": "number",
            "value": 3,
          },
          "instanceType": Object {
            "fields": Object {
              "aws-cdk-lib.aws_ec2.InstanceType.of": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "T2",
                  },
                  Object {
                    "type": "string",
                    "value": "XLARGE",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
          "machineImage": Object {
            "fields": Object {
              "aws-cdk-lib.aws_ecs.EcsOptimizedImage.amazonLinux2": Object {
                "array": Array [],
                "type": "array",
              },
            },
            "type": "object",
          },
          "vpc": Object {
            "fn": "ref",
            "logicalId": "MyVpc",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "Description": "A template creates an ASG and Vpc",
      "Resources": Object {
        "MyFleet": Object {
          "Properties": Object {
            "desiredCapacity": 3,
            "instanceType": Object {
              "aws-cdk-lib.aws_ec2.InstanceType.of": Array [
                "T2",
                "XLARGE",
              ],
            },
            "machineImage": Object {
              "aws-cdk-lib.aws_ecs.EcsOptimizedImage.amazonLinux2": Array [],
            },
            "vpc": Object {
              "Ref": "MyVpc",
            },
          },
          "Type": "aws-cdk-lib.aws_autoscaling.AutoScalingGroup",
        },
        "MyVpc": Object {
          "Properties": Object {
            "maxAzs": 2,
          },
          "Type": "aws-cdk-lib.aws_ec2.Vpc",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`lambda-dashboard.yaml 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {
    "DashboardName" => Object {
      "allowedPattern": "^[a-zA-Z0-9-_]*$",
      "allowedValues": undefined,
      "constraintDescription": undefined,
      "default": "SampleDashboard",
      "description": undefined,
      "maxLength": undefined,
      "maxValue": undefined,
      "minLength": undefined,
      "minValue": undefined,
      "noEcho": undefined,
      "type": "String",
    },
  },
  "resources": DependencyGraph {
    "_dependencies": Map {
      "SampleLambda" => Set {},
      "Invocations" => Set {
        "SampleLambda",
      },
      "Errors" => Set {
        "SampleLambda",
      },
      "Duration" => Set {
        "SampleLambda",
      },
      "Throttles" => Set {
        "SampleLambda",
      },
      "TitleWidget" => Set {
        "SampleLambda",
      },
      "ServiceDashboard" => Set {
        "TitleWidget",
        "Invocations",
        "Errors",
        "Duration",
        "Throttles",
        "SampleLambda",
      },
    },
    "keys": Set {
      "SampleLambda",
      "Invocations",
      "Errors",
      "Duration",
      "Throttles",
      "TitleWidget",
      "ServiceDashboard",
    },
    "nodes": Object {
      "Duration": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "logicalId": "SampleLambda",
          "method": "metricDuration",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "Duration",
        "namespace": "aws_cloudwatch",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "Errors": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "logicalId": "SampleLambda",
          "method": "metricErrors",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "Errors",
        "namespace": "aws_cloudwatch",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "Invocations": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "logicalId": "SampleLambda",
          "method": "metricInvocations",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "Invocations",
        "namespace": "aws_cloudwatch",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "SampleLambda": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "SampleLambda",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "code": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "examples/lambda-handler",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_lambda.Code",
              "method": "fromAsset",
              "namespace": "aws_lambda",
              "type": "staticMethodCall",
            },
            "handler": Object {
              "type": "string",
              "value": "index.handler",
            },
            "memorySize": Object {
              "type": "number",
              "value": 512,
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "NODEJS_16_X",
              "type": "staticProperty",
            },
            "timeout": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "number",
                    "value": 10,
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.Duration",
              "method": "seconds",
              "namespace": undefined,
              "type": "staticMethodCall",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "ServiceDashboard": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_cloudwatch.Dashboard",
        "logicalId": "ServiceDashboard",
        "namespace": "aws_cloudwatch",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "dashboardName": Object {
              "fn": "ref",
              "logicalId": "DashboardName",
              "type": "intrinsic",
            },
            "widgets": Object {
              "array": Array [
                Object {
                  "array": Array [
                    Object {
                      "reference": Object {
                        "fn": "ref",
                        "logicalId": "TitleWidget",
                        "type": "intrinsic",
                      },
                      "type": "resolve-reference",
                    },
                    Object {
                      "args": Object {
                        "array": Array [
                          Object {
                            "fields": Object {
                              "left": Object {
                                "array": Array [
                                  Object {
                                    "reference": Object {
                                      "fn": "ref",
                                      "logicalId": "Invocations",
                                      "type": "intrinsic",
                                    },
                                    "type": "resolve-reference",
                                  },
                                ],
                                "type": "array",
                              },
                              "title": Object {
                                "type": "string",
                                "value": "Invocations",
                              },
                            },
                            "type": "struct",
                          },
                        ],
                        "type": "array",
                      },
                      "fqn": "aws-cdk-lib.aws_cloudwatch.GraphWidget",
                      "namespace": "aws_cloudwatch",
                      "type": "initializer",
                    },
                    Object {
                      "args": Object {
                        "array": Array [
                          Object {
                            "fields": Object {
                              "left": Object {
                                "array": Array [
                                  Object {
                                    "reference": Object {
                                      "fn": "ref",
                                      "logicalId": "Errors",
                                      "type": "intrinsic",
                                    },
                                    "type": "resolve-reference",
                                  },
                                ],
                                "type": "array",
                              },
                              "title": Object {
                                "type": "string",
                                "value": "Errors",
                              },
                            },
                            "type": "struct",
                          },
                        ],
                        "type": "array",
                      },
                      "fqn": "aws-cdk-lib.aws_cloudwatch.GraphWidget",
                      "namespace": "aws_cloudwatch",
                      "type": "initializer",
                    },
                    Object {
                      "args": Object {
                        "array": Array [
                          Object {
                            "fields": Object {
                              "left": Object {
                                "array": Array [
                                  Object {
                                    "reference": Object {
                                      "fn": "ref",
                                      "logicalId": "Duration",
                                      "type": "intrinsic",
                                    },
                                    "type": "resolve-reference",
                                  },
                                ],
                                "type": "array",
                              },
                              "title": Object {
                                "type": "string",
                                "value": "Duration",
                              },
                            },
                            "type": "struct",
                          },
                        ],
                        "type": "array",
                      },
                      "fqn": "aws-cdk-lib.aws_cloudwatch.GraphWidget",
                      "namespace": "aws_cloudwatch",
                      "type": "initializer",
                    },
                    Object {
                      "args": Object {
                        "array": Array [
                          Object {
                            "fields": Object {
                              "left": Object {
                                "array": Array [
                                  Object {
                                    "reference": Object {
                                      "fn": "ref",
                                      "logicalId": "Throttles",
                                      "type": "intrinsic",
                                    },
                                    "type": "resolve-reference",
                                  },
                                ],
                                "type": "array",
                              },
                              "title": Object {
                                "type": "string",
                                "value": "Throttles",
                              },
                            },
                            "type": "struct",
                          },
                        ],
                        "type": "array",
                      },
                      "fqn": "aws-cdk-lib.aws_cloudwatch.GraphWidget",
                      "namespace": "aws_cloudwatch",
                      "type": "initializer",
                    },
                    Object {
                      "args": Object {
                        "array": Array [
                          Object {
                            "fields": Object {
                              "logGroupNames": Object {
                                "array": Array [
                                  Object {
                                    "fn": "getProp",
                                    "logicalId": "SampleLambda",
                                    "property": "logGroup.logGroupName",
                                    "type": "intrinsic",
                                  },
                                ],
                                "type": "array",
                              },
                              "queryLines": Object {
                                "array": Array [
                                  Object {
                                    "type": "string",
                                    "value": "fields @timestamp, @message",
                                  },
                                  Object {
                                    "type": "string",
                                    "value": "sort @timestamp desc",
                                  },
                                  Object {
                                    "type": "string",
                                    "value": "limit 20",
                                  },
                                ],
                                "type": "array",
                              },
                              "width": Object {
                                "type": "number",
                                "value": 24,
                              },
                            },
                            "type": "struct",
                          },
                        ],
                        "type": "array",
                      },
                      "fqn": "aws-cdk-lib.aws_cloudwatch.LogQueryWidget",
                      "namespace": "aws_cloudwatch",
                      "type": "initializer",
                    },
                  ],
                  "type": "array",
                },
              ],
              "type": "array",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Throttles": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "logicalId": "SampleLambda",
          "method": "metricThrottles",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "Throttles",
        "namespace": "aws_cloudwatch",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "TitleWidget": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_cloudwatch.TextWidget",
        "logicalId": "TitleWidget",
        "namespace": "aws_cloudwatch",
        "props": Object {
          "fields": Object {
            "markdown": Object {
              "fn": "join",
              "list": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "# Operational Metrics: ",
                  },
                  Object {
                    "fn": "ref",
                    "logicalId": "SampleLambda",
                    "type": "intrinsic",
                  },
                ],
                "type": "array",
              },
              "separator": "",
              "type": "intrinsic",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "cdkObject",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {
      "DashboardName" => Object {
        "allowedPattern": "^[a-zA-Z0-9-_]*$",
        "allowedValues": undefined,
        "constraintDescription": undefined,
        "default": "SampleDashboard",
        "description": undefined,
        "maxLength": undefined,
        "maxValue": undefined,
        "minLength": undefined,
        "minValue": undefined,
        "noEcho": undefined,
        "type": "String",
      },
    },
    "resources": Map {
      "SampleLambda" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "code": Object {
            "fields": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": Object {
                "type": "string",
                "value": "examples/lambda-handler",
              },
            },
            "type": "object",
          },
          "handler": Object {
            "type": "string",
            "value": "index.handler",
          },
          "memorySize": Object {
            "type": "number",
            "value": 512,
          },
          "runtime": Object {
            "type": "string",
            "value": "NODEJS_16_X",
          },
          "timeout": Object {
            "fields": Object {
              "aws-cdk-lib.Duration.seconds": Object {
                "type": "number",
                "value": 10,
              },
            },
            "type": "object",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Invocations" => Object {
        "call": Object {
          "fields": Object {
            "metricInvocations": Object {
              "type": "null",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "SampleLambda",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "SampleLambda",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_cloudwatch.Metric",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Errors" => Object {
        "call": Object {
          "fields": Object {
            "metricErrors": Object {
              "type": "null",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "SampleLambda",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "SampleLambda",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_cloudwatch.Metric",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Duration" => Object {
        "call": Object {
          "fields": Object {
            "metricDuration": Object {
              "type": "null",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "SampleLambda",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "SampleLambda",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_cloudwatch.Metric",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Throttles" => Object {
        "call": Object {
          "fields": Object {
            "metricThrottles": Object {
              "type": "null",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "SampleLambda",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "SampleLambda",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_cloudwatch.Metric",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "TitleWidget" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "SampleLambda",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "markdown": Object {
            "fn": "join",
            "list": Object {
              "array": Array [
                Object {
                  "type": "string",
                  "value": "# Operational Metrics: ",
                },
                Object {
                  "fn": "ref",
                  "logicalId": "SampleLambda",
                  "type": "intrinsic",
                },
              ],
              "type": "array",
            },
            "separator": "",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_cloudwatch.TextWidget",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "ServiceDashboard" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "DashboardName",
          "TitleWidget",
          "Invocations",
          "Errors",
          "Duration",
          "Throttles",
          "SampleLambda",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "dashboardName": Object {
            "fn": "ref",
            "logicalId": "DashboardName",
            "type": "intrinsic",
          },
          "widgets": Object {
            "array": Array [
              Object {
                "array": Array [
                  Object {
                    "fn": "ref",
                    "logicalId": "TitleWidget",
                    "type": "intrinsic",
                  },
                  Object {
                    "fields": Object {
                      "aws-cdk-lib.aws_cloudwatch.GraphWidget": Object {
                        "fields": Object {
                          "left": Object {
                            "array": Array [
                              Object {
                                "fn": "ref",
                                "logicalId": "Invocations",
                                "type": "intrinsic",
                              },
                            ],
                            "type": "array",
                          },
                          "title": Object {
                            "type": "string",
                            "value": "Invocations",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                  Object {
                    "fields": Object {
                      "aws-cdk-lib.aws_cloudwatch.GraphWidget": Object {
                        "fields": Object {
                          "left": Object {
                            "array": Array [
                              Object {
                                "fn": "ref",
                                "logicalId": "Errors",
                                "type": "intrinsic",
                              },
                            ],
                            "type": "array",
                          },
                          "title": Object {
                            "type": "string",
                            "value": "Errors",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                  Object {
                    "fields": Object {
                      "aws-cdk-lib.aws_cloudwatch.GraphWidget": Object {
                        "fields": Object {
                          "left": Object {
                            "array": Array [
                              Object {
                                "fn": "ref",
                                "logicalId": "Duration",
                                "type": "intrinsic",
                              },
                            ],
                            "type": "array",
                          },
                          "title": Object {
                            "type": "string",
                            "value": "Duration",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                  Object {
                    "fields": Object {
                      "aws-cdk-lib.aws_cloudwatch.GraphWidget": Object {
                        "fields": Object {
                          "left": Object {
                            "array": Array [
                              Object {
                                "fn": "ref",
                                "logicalId": "Throttles",
                                "type": "intrinsic",
                              },
                            ],
                            "type": "array",
                          },
                          "title": Object {
                            "type": "string",
                            "value": "Throttles",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                  Object {
                    "fields": Object {
                      "aws-cdk-lib.aws_cloudwatch.LogQueryWidget": Object {
                        "fields": Object {
                          "logGroupNames": Object {
                            "array": Array [
                              Object {
                                "fn": "getProp",
                                "logicalId": "SampleLambda",
                                "property": "logGroup.logGroupName",
                                "type": "intrinsic",
                              },
                            ],
                            "type": "array",
                          },
                          "queryLines": Object {
                            "array": Array [
                              Object {
                                "type": "string",
                                "value": "fields @timestamp, @message",
                              },
                              Object {
                                "type": "string",
                                "value": "sort @timestamp desc",
                              },
                              Object {
                                "type": "string",
                                "value": "limit 20",
                              },
                            ],
                            "type": "array",
                          },
                          "width": Object {
                            "type": "number",
                            "value": 24,
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
            "type": "array",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_cloudwatch.Dashboard",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "Parameters": Object {
        "DashboardName": Object {
          "AllowedPattern": "^[a-zA-Z0-9-_]*$",
          "Default": "SampleDashboard",
          "Type": "String",
        },
      },
      "Resources": Object {
        "Duration": Object {
          "Call": Object {
            "metricDuration": null,
          },
          "On": "SampleLambda",
          "Type": "aws-cdk-lib.aws_cloudwatch.Metric",
        },
        "Errors": Object {
          "Call": Object {
            "metricErrors": null,
          },
          "On": "SampleLambda",
          "Type": "aws-cdk-lib.aws_cloudwatch.Metric",
        },
        "Invocations": Object {
          "Call": Object {
            "metricInvocations": null,
          },
          "On": "SampleLambda",
          "Type": "aws-cdk-lib.aws_cloudwatch.Metric",
        },
        "SampleLambda": Object {
          "Properties": Object {
            "code": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": "examples/lambda-handler",
            },
            "handler": "index.handler",
            "memorySize": 512,
            "runtime": "NODEJS_16_X",
            "timeout": Object {
              "aws-cdk-lib.Duration.seconds": 10,
            },
          },
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
        "ServiceDashboard": Object {
          "Properties": Object {
            "dashboardName": Object {
              "Ref": "DashboardName",
            },
            "widgets": Array [
              Array [
                Object {
                  "Ref": "TitleWidget",
                },
                Object {
                  "aws-cdk-lib.aws_cloudwatch.GraphWidget": Object {
                    "left": Array [
                      Object {
                        "Ref": "Invocations",
                      },
                    ],
                    "title": "Invocations",
                  },
                },
                Object {
                  "aws-cdk-lib.aws_cloudwatch.GraphWidget": Object {
                    "left": Array [
                      Object {
                        "Ref": "Errors",
                      },
                    ],
                    "title": "Errors",
                  },
                },
                Object {
                  "aws-cdk-lib.aws_cloudwatch.GraphWidget": Object {
                    "left": Array [
                      Object {
                        "Ref": "Duration",
                      },
                    ],
                    "title": "Duration",
                  },
                },
                Object {
                  "aws-cdk-lib.aws_cloudwatch.GraphWidget": Object {
                    "left": Array [
                      Object {
                        "Ref": "Throttles",
                      },
                    ],
                    "title": "Throttles",
                  },
                },
                Object {
                  "aws-cdk-lib.aws_cloudwatch.LogQueryWidget": Object {
                    "logGroupNames": Array [
                      Object {
                        "CDK::GetProp": "SampleLambda.logGroup.logGroupName",
                      },
                    ],
                    "queryLines": Array [
                      "fields @timestamp, @message",
                      "sort @timestamp desc",
                      "limit 20",
                    ],
                    "width": 24,
                  },
                },
              ],
            ],
          },
          "Type": "aws-cdk-lib.aws_cloudwatch.Dashboard",
        },
        "Throttles": Object {
          "Call": Object {
            "metricThrottles": null,
          },
          "On": "SampleLambda",
          "Type": "aws-cdk-lib.aws_cloudwatch.Metric",
        },
        "TitleWidget": Object {
          "Properties": Object {
            "markdown": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "# Operational Metrics: ",
                  Object {
                    "Ref": "SampleLambda",
                  },
                ],
              ],
            },
          },
          "Type": "aws-cdk-lib.aws_cloudwatch.TextWidget",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`lambda-events.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "MyTopic" => Set {},
      "Table" => Set {},
      "HelloWorldFunction" => Set {
        "Table",
        "MyTopic",
      },
    },
    "keys": Set {
      "MyTopic",
      "Table",
      "HelloWorldFunction",
    },
    "nodes": Object {
      "HelloWorldFunction": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "HelloWorldFunction",
        "namespace": "aws_lambda",
        "overrides": Array [
          Object {
            "childConstructPath": "ServiceRole",
            "update": Object {
              "path": "Properties.Description",
              "value": Object {
                "type": "string",
                "value": "This value has been overridden",
              },
            },
          },
        ],
        "props": Object {
          "fields": Object {
            "code": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "examples/lambda-handler",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_lambda.Code",
              "method": "fromAsset",
              "namespace": "aws_lambda",
              "type": "staticMethodCall",
            },
            "environment": Object {
              "fields": Object {
                "Param": Object {
                  "type": "string",
                  "value": "f",
                },
              },
              "type": "object",
            },
            "events": Object {
              "array": Array [
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "reference": Object {
                          "fn": "ref",
                          "logicalId": "Table",
                          "type": "intrinsic",
                        },
                        "type": "resolve-reference",
                      },
                      Object {
                        "fields": Object {
                          "startingPosition": Object {
                            "choice": "TRIM_HORIZON",
                            "fqn": "aws-cdk-lib.aws_lambda.StartingPosition",
                            "namespace": "aws_lambda",
                            "type": "enum",
                          },
                        },
                        "type": "struct",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_lambda_event_sources.DynamoEventSource",
                  "namespace": "aws_lambda_event_sources",
                  "type": "initializer",
                },
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "GET",
                      },
                      Object {
                        "type": "string",
                        "value": "/hello",
                      },
                      Object {
                        "type": "void",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_lambda_event_sources.ApiEventSource",
                  "namespace": "aws_lambda_event_sources",
                  "type": "initializer",
                },
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "POST",
                      },
                      Object {
                        "type": "string",
                        "value": "/hello",
                      },
                      Object {
                        "type": "void",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_lambda_event_sources.ApiEventSource",
                  "namespace": "aws_lambda_event_sources",
                  "type": "initializer",
                },
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "reference": Object {
                          "fn": "ref",
                          "logicalId": "MyTopic",
                          "type": "intrinsic",
                        },
                        "type": "resolve-reference",
                      },
                      Object {
                        "type": "void",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_lambda_event_sources.SnsEventSource",
                  "namespace": "aws_lambda_event_sources",
                  "type": "initializer",
                },
              ],
              "type": "array",
            },
            "handler": Object {
              "type": "string",
              "value": "app.hello_handler",
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "PYTHON_3_6",
              "type": "staticProperty",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "MyTopic": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_sns.Topic",
        "logicalId": "MyTopic",
        "namespace": "aws_sns",
        "overrides": Array [],
        "props": Object {
          "fields": Object {},
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Table": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_dynamodb.Table",
        "logicalId": "Table",
        "namespace": "aws_dynamodb",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "partitionKey": Object {
              "fields": Object {
                "name": Object {
                  "type": "string",
                  "value": "ID",
                },
                "type": Object {
                  "choice": "STRING",
                  "fqn": "aws-cdk-lib.aws_dynamodb.AttributeType",
                  "namespace": "aws_dynamodb",
                  "type": "enum",
                },
              },
              "type": "struct",
            },
            "stream": Object {
              "choice": "NEW_AND_OLD_IMAGES",
              "fqn": "aws-cdk-lib.aws_dynamodb.StreamViewType",
              "namespace": "aws_dynamodb",
              "type": "enum",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": "A template creates a lambda function which can be invoked by an sns topic",
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "MyTopic" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_sns.Topic",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Table" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "partitionKey": Object {
            "fields": Object {
              "name": Object {
                "type": "string",
                "value": "ID",
              },
              "type": Object {
                "type": "string",
                "value": "STRING",
              },
            },
            "type": "object",
          },
          "stream": Object {
            "type": "string",
            "value": "NEW_AND_OLD_IMAGES",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_dynamodb.Table",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "HelloWorldFunction" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Table",
          "MyTopic",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [
          Object {
            "childConstructPath": "ServiceRole",
            "update": Object {
              "path": "Properties.Description",
              "value": Object {
                "type": "string",
                "value": "This value has been overridden",
              },
            },
          },
        ],
        "properties": Object {
          "code": Object {
            "fields": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": Object {
                "type": "string",
                "value": "examples/lambda-handler",
              },
            },
            "type": "object",
          },
          "environment": Object {
            "fields": Object {
              "Param": Object {
                "type": "string",
                "value": "f",
              },
            },
            "type": "object",
          },
          "events": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_lambda_event_sources.DynamoEventSource": Object {
                    "array": Array [
                      Object {
                        "fn": "ref",
                        "logicalId": "Table",
                        "type": "intrinsic",
                      },
                      Object {
                        "fields": Object {
                          "startingPosition": Object {
                            "type": "string",
                            "value": "TRIM_HORIZON",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_lambda_event_sources.ApiEventSource": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "GET",
                      },
                      Object {
                        "type": "string",
                        "value": "/hello",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_lambda_event_sources.ApiEventSource": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "POST",
                      },
                      Object {
                        "type": "string",
                        "value": "/hello",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_lambda_event_sources.SnsEventSource": Object {
                    "fn": "ref",
                    "logicalId": "MyTopic",
                    "type": "intrinsic",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
          "handler": Object {
            "type": "string",
            "value": "app.hello_handler",
          },
          "runtime": Object {
            "type": "string",
            "value": "PYTHON_3_6",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "Description": "A template creates a lambda function which can be invoked by an sns topic",
      "Resources": Object {
        "HelloWorldFunction": Object {
          "Overrides": Array [
            Object {
              "ChildConstructPath": "ServiceRole",
              "Update": Object {
                "Path": "Properties.Description",
                "Value": "This value has been overridden",
              },
            },
          ],
          "Properties": Object {
            "code": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": "examples/lambda-handler",
            },
            "environment": Object {
              "Param": "f",
            },
            "events": Array [
              Object {
                "aws-cdk-lib.aws_lambda_event_sources.DynamoEventSource": Array [
                  Object {
                    "Ref": "Table",
                  },
                  Object {
                    "startingPosition": "TRIM_HORIZON",
                  },
                ],
              },
              Object {
                "aws-cdk-lib.aws_lambda_event_sources.ApiEventSource": Array [
                  "GET",
                  "/hello",
                ],
              },
              Object {
                "aws-cdk-lib.aws_lambda_event_sources.ApiEventSource": Array [
                  "POST",
                  "/hello",
                ],
              },
              Object {
                "aws-cdk-lib.aws_lambda_event_sources.SnsEventSource": Object {
                  "Ref": "MyTopic",
                },
              },
            ],
            "handler": "app.hello_handler",
            "runtime": "PYTHON_3_6",
          },
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
        "MyTopic": Object {
          "Type": "aws-cdk-lib.aws_sns.Topic",
        },
        "Table": Object {
          "Properties": Object {
            "partitionKey": Object {
              "name": "ID",
              "type": "STRING",
            },
            "stream": "NEW_AND_OLD_IMAGES",
          },
          "Type": "aws-cdk-lib.aws_dynamodb.Table",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`lambda-layer.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "AwsCliLayer" => Set {},
      "Lambda" => Set {
        "AwsCliLayer",
      },
    },
    "keys": Set {
      "AwsCliLayer",
      "Lambda",
    },
    "nodes": Object {
      "AwsCliLayer": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.lambda_layer_awscli.AwsCliLayer",
        "logicalId": "AwsCliLayer",
        "namespace": "lambda_layer_awscli",
        "overrides": Array [],
        "props": Object {
          "type": "void",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Lambda": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "Lambda",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "code": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "exports.handler = async function() { return 'SUCCESS'; }",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_lambda.Code",
              "method": "fromInline",
              "namespace": "aws_lambda",
              "type": "staticMethodCall",
            },
            "handler": Object {
              "type": "string",
              "value": "index.handler",
            },
            "layers": Object {
              "array": Array [
                Object {
                  "reference": Object {
                    "fn": "ref",
                    "logicalId": "AwsCliLayer",
                    "type": "intrinsic",
                  },
                  "type": "resolve-reference",
                },
              ],
              "type": "array",
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "NODEJS_16_X",
              "type": "staticProperty",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": "A template creates a aws cli lambda layer",
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "AwsCliLayer" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.lambda_layer_awscli.AwsCliLayer",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Lambda" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "AwsCliLayer",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "code": Object {
            "fields": Object {
              "aws-cdk-lib.aws_lambda.Code.fromInline": Object {
                "type": "string",
                "value": "exports.handler = async function() { return 'SUCCESS'; }",
              },
            },
            "type": "object",
          },
          "handler": Object {
            "type": "string",
            "value": "index.handler",
          },
          "layers": Object {
            "array": Array [
              Object {
                "fn": "ref",
                "logicalId": "AwsCliLayer",
                "type": "intrinsic",
              },
            ],
            "type": "array",
          },
          "runtime": Object {
            "type": "string",
            "value": "NODEJS_16_X",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "A template creates a aws cli lambda layer",
      "Resources": Object {
        "AwsCliLayer": Object {
          "Type": "aws-cdk-lib.lambda_layer_awscli.AwsCliLayer",
        },
        "Lambda": Object {
          "Properties": Object {
            "code": Object {
              "aws-cdk-lib.aws_lambda.Code.fromInline": "exports.handler = async function() { return 'SUCCESS'; }",
            },
            "handler": "index.handler",
            "layers": Array [
              Object {
                "Ref": "AwsCliLayer",
              },
            ],
            "runtime": "NODEJS_16_X",
          },
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
      },
    },
    "templateFormatVersion": "2010-09-09",
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`lambda-policy.yaml 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "MyLambda" => Set {
        "MyBucket",
      },
      "MyBucket" => Set {},
    },
    "keys": Set {
      "MyBucket",
      "MyLambda",
    },
    "nodes": Object {
      "MyBucket": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_s3.Bucket",
        "logicalId": "MyBucket",
        "namespace": "aws_s3",
        "overrides": Array [],
        "props": Object {
          "fields": Object {},
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "MyLambda": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "MyLambda",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "code": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "reference": Object {
                      "fn": "ref",
                      "logicalId": "MyBucket",
                      "type": "intrinsic",
                    },
                    "type": "resolve-reference",
                  },
                  Object {
                    "type": "string",
                    "value": "handler.zip",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_lambda.Code",
              "method": "fromBucket",
              "namespace": "aws_lambda",
              "type": "staticMethodCall",
            },
            "handler": Object {
              "type": "string",
              "value": "index.handler",
            },
            "initialPolicy": Object {
              "array": Array [
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "type": "any",
                        "value": Object {
                          "fields": Object {
                            "Action": Object {
                              "array": Array [
                                Object {
                                  "type": "string",
                                  "value": "s3:GetObject*",
                                },
                                Object {
                                  "type": "string",
                                  "value": "s3:PutObject*",
                                },
                              ],
                              "type": "array",
                            },
                            "Effect": Object {
                              "type": "string",
                              "value": "Allow",
                            },
                            "Resource": Object {
                              "array": Array [
                                Object {
                                  "fn": "ref",
                                  "logicalId": "MyBucket",
                                  "type": "intrinsic",
                                },
                                Object {
                                  "fn": "join",
                                  "list": Object {
                                    "array": Array [
                                      Object {
                                        "attribute": Object {
                                          "type": "string",
                                          "value": "Arn",
                                        },
                                        "fn": "getAtt",
                                        "logicalId": "MyBucket",
                                        "type": "intrinsic",
                                      },
                                      Object {
                                        "type": "string",
                                        "value": "/*",
                                      },
                                    ],
                                    "type": "array",
                                  },
                                  "separator": "",
                                  "type": "intrinsic",
                                },
                              ],
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_iam.PolicyStatement",
                  "method": "fromJson",
                  "namespace": "aws_iam",
                  "type": "staticMethodCall",
                },
              ],
              "type": "array",
            },
            "memorySize": Object {
              "type": "number",
              "value": 10240,
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "NODEJS_16_X",
              "type": "staticProperty",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "MyLambda" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "MyBucket",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "code": Object {
            "fields": Object {
              "aws-cdk-lib.aws_lambda.Code.fromBucket": Object {
                "array": Array [
                  Object {
                    "fn": "ref",
                    "logicalId": "MyBucket",
                    "type": "intrinsic",
                  },
                  Object {
                    "type": "string",
                    "value": "handler.zip",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
          "handler": Object {
            "type": "string",
            "value": "index.handler",
          },
          "initialPolicy": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_iam.PolicyStatement.fromJson": Object {
                    "array": Array [
                      Object {
                        "fields": Object {
                          "Action": Object {
                            "array": Array [
                              Object {
                                "type": "string",
                                "value": "s3:GetObject*",
                              },
                              Object {
                                "type": "string",
                                "value": "s3:PutObject*",
                              },
                            ],
                            "type": "array",
                          },
                          "Effect": Object {
                            "type": "string",
                            "value": "Allow",
                          },
                          "Resource": Object {
                            "array": Array [
                              Object {
                                "fn": "ref",
                                "logicalId": "MyBucket",
                                "type": "intrinsic",
                              },
                              Object {
                                "fn": "join",
                                "list": Object {
                                  "array": Array [
                                    Object {
                                      "attribute": Object {
                                        "type": "string",
                                        "value": "Arn",
                                      },
                                      "fn": "getAtt",
                                      "logicalId": "MyBucket",
                                      "type": "intrinsic",
                                    },
                                    Object {
                                      "type": "string",
                                      "value": "/*",
                                    },
                                  ],
                                  "type": "array",
                                },
                                "separator": "",
                                "type": "intrinsic",
                              },
                            ],
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
          "memorySize": Object {
            "type": "number",
            "value": 10240,
          },
          "runtime": Object {
            "type": "string",
            "value": "NODEJS_16_X",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "MyBucket" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_s3.Bucket",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "Resources": Object {
        "MyBucket": Object {
          "Type": "aws-cdk-lib.aws_s3.Bucket",
        },
        "MyLambda": Object {
          "Properties": Object {
            "code": Object {
              "aws-cdk-lib.aws_lambda.Code.fromBucket": Array [
                Object {
                  "Ref": "MyBucket",
                },
                "handler.zip",
              ],
            },
            "handler": "index.handler",
            "initialPolicy": Array [
              Object {
                "aws-cdk-lib.aws_iam.PolicyStatement.fromJson": Array [
                  Object {
                    "Action": Array [
                      "s3:GetObject*",
                      "s3:PutObject*",
                    ],
                    "Effect": "Allow",
                    "Resource": Array [
                      Object {
                        "Ref": "MyBucket",
                      },
                      Object {
                        "Fn::Join": Array [
                          "",
                          Array [
                            Object {
                              "Fn::GetAtt": "MyBucket.Arn",
                            },
                            "/*",
                          ],
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
            "memorySize": 10240,
            "runtime": "NODEJS_16_X",
          },
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`lambda-policy-from-constructor.yaml 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "MyBucket" => Set {},
      "MyLambda" => Set {
        "MyBucket",
      },
    },
    "keys": Set {
      "MyBucket",
      "MyLambda",
    },
    "nodes": Object {
      "MyBucket": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_s3.Bucket",
        "logicalId": "MyBucket",
        "namespace": "aws_s3",
        "overrides": Array [],
        "props": Object {
          "fields": Object {},
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "MyLambda": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "MyLambda",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "code": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "reference": Object {
                      "fn": "ref",
                      "logicalId": "MyBucket",
                      "type": "intrinsic",
                    },
                    "type": "resolve-reference",
                  },
                  Object {
                    "type": "string",
                    "value": "handler.zip",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_lambda.Code",
              "method": "fromBucket",
              "namespace": "aws_lambda",
              "type": "staticMethodCall",
            },
            "handler": Object {
              "type": "string",
              "value": "index.handler",
            },
            "initialPolicy": Object {
              "array": Array [
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "fields": Object {
                          "actions": Object {
                            "array": Array [
                              Object {
                                "type": "string",
                                "value": "s3:GetObject*",
                              },
                              Object {
                                "type": "string",
                                "value": "s3:PutObject*",
                              },
                            ],
                            "type": "array",
                          },
                          "resources": Object {
                            "array": Array [
                              Object {
                                "type": "string",
                                "value": "*",
                              },
                            ],
                            "type": "array",
                          },
                        },
                        "type": "struct",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_iam.PolicyStatement",
                  "namespace": "aws_iam",
                  "type": "initializer",
                },
              ],
              "type": "array",
            },
            "memorySize": Object {
              "type": "number",
              "value": 10240,
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "NODEJS_16_X",
              "type": "staticProperty",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "MyBucket" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_s3.Bucket",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "MyLambda" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "MyBucket",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "code": Object {
            "fields": Object {
              "aws-cdk-lib.aws_lambda.Code.fromBucket": Object {
                "array": Array [
                  Object {
                    "fn": "ref",
                    "logicalId": "MyBucket",
                    "type": "intrinsic",
                  },
                  Object {
                    "type": "string",
                    "value": "handler.zip",
                  },
                ],
                "type": "array",
              },
            },
            "type": "object",
          },
          "handler": Object {
            "type": "string",
            "value": "index.handler",
          },
          "initialPolicy": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_iam.PolicyStatement": Object {
                    "fields": Object {
                      "actions": Object {
                        "array": Array [
                          Object {
                            "type": "string",
                            "value": "s3:GetObject*",
                          },
                          Object {
                            "type": "string",
                            "value": "s3:PutObject*",
                          },
                        ],
                        "type": "array",
                      },
                      "resources": Object {
                        "array": Array [
                          Object {
                            "type": "string",
                            "value": "*",
                          },
                        ],
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
          "memorySize": Object {
            "type": "number",
            "value": 10240,
          },
          "runtime": Object {
            "type": "string",
            "value": "NODEJS_16_X",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "Resources": Object {
        "MyBucket": Object {
          "Type": "aws-cdk-lib.aws_s3.Bucket",
        },
        "MyLambda": Object {
          "Properties": Object {
            "code": Object {
              "aws-cdk-lib.aws_lambda.Code.fromBucket": Array [
                Object {
                  "Ref": "MyBucket",
                },
                "handler.zip",
              ],
            },
            "handler": "index.handler",
            "initialPolicy": Array [
              Object {
                "aws-cdk-lib.aws_iam.PolicyStatement": Object {
                  "actions": Array [
                    "s3:GetObject*",
                    "s3:PutObject*",
                  ],
                  "resources": Array [
                    "*",
                  ],
                },
              },
            ],
            "memorySize": 10240,
            "runtime": "NODEJS_16_X",
          },
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
      },
    },
    "templateFormatVersion": undefined,
  },
}
`;

exports[`lambda-role-removed.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "Lambda" => Set {},
    },
    "keys": Set {
      "Lambda",
    },
    "nodes": Object {
      "Lambda": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "Lambda",
        "namespace": "aws_lambda",
        "overrides": Array [
          Object {
            "childConstructPath": "ServiceRole",
            "removeResource": true,
          },
        ],
        "props": Object {
          "fields": Object {
            "code": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "examples/lambda-handler",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_lambda.Code",
              "method": "fromAsset",
              "namespace": "aws_lambda",
              "type": "staticMethodCall",
            },
            "description": Object {
              "type": "string",
              "value": "This function has its service role removed, for demonstration purposes. You probably wouldn't do this to a real function",
            },
            "handler": Object {
              "type": "string",
              "value": "index.handler",
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "NODEJS",
              "type": "staticProperty",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "Lambda" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [
          Object {
            "childConstructPath": "ServiceRole",
            "removeResource": true,
          },
        ],
        "properties": Object {
          "code": Object {
            "fields": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": Object {
                "type": "string",
                "value": "examples/lambda-handler",
              },
            },
            "type": "object",
          },
          "description": Object {
            "type": "string",
            "value": "This function has its service role removed, for demonstration purposes. You probably wouldn't do this to a real function",
          },
          "handler": Object {
            "type": "string",
            "value": "index.handler",
          },
          "runtime": Object {
            "type": "string",
            "value": "NODEJS",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "Resources": Object {
        "Lambda": Object {
          "Overrides": Array [
            Object {
              "ChildConstructPath": "ServiceRole",
              "RemoveResource": true,
            },
          ],
          "Properties": Object {
            "code": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": "examples/lambda-handler",
            },
            "description": "This function has its service role removed, for demonstration purposes. You probably wouldn't do this to a real function",
            "handler": "index.handler",
            "runtime": "NODEJS",
          },
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`lambda-topic.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {
    "FunctionArn" => Object {
      "conditionName": undefined,
      "description": undefined,
      "exportName": Object {
        "fn": "join",
        "list": Object {
          "array": Array [
            Object {
              "fn": "ref",
              "logicalId": "AWS::StackName",
              "type": "intrinsic",
            },
            Object {
              "type": "string",
              "value": "FunctionName",
            },
          ],
          "type": "array",
        },
        "separator": "-",
        "type": "intrinsic",
      },
      "value": Object {
        "fn": "getProp",
        "logicalId": "Lambda",
        "property": "functionName",
        "type": "intrinsic",
      },
    },
  },
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "Topic" => Set {},
      "Lambda" => Set {
        "Topic",
      },
    },
    "keys": Set {
      "Topic",
      "Lambda",
    },
    "nodes": Object {
      "Lambda": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "Lambda",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "code": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "examples/lambda-handler",
                  },
                  Object {
                    "type": "void",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_lambda.Code",
              "method": "fromAsset",
              "namespace": "aws_lambda",
              "type": "staticMethodCall",
            },
            "events": Object {
              "array": Array [
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "reference": Object {
                          "fn": "ref",
                          "logicalId": "Topic",
                          "type": "intrinsic",
                        },
                        "type": "resolve-reference",
                      },
                      Object {
                        "type": "void",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_lambda_event_sources.SnsEventSource",
                  "namespace": "aws_lambda_event_sources",
                  "type": "initializer",
                },
              ],
              "type": "array",
            },
            "handler": Object {
              "type": "string",
              "value": "index.handler",
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "NODEJS",
              "type": "staticProperty",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Topic": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_sns.Topic",
        "logicalId": "Topic",
        "namespace": "aws_sns",
        "overrides": Array [],
        "props": Object {
          "fields": Object {},
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {
      "FunctionArn" => Object {
        "conditionName": undefined,
        "description": undefined,
        "exportName": Object {
          "fn": "join",
          "list": Object {
            "array": Array [
              Object {
                "fn": "ref",
                "logicalId": "AWS::StackName",
                "type": "intrinsic",
              },
              Object {
                "type": "string",
                "value": "FunctionName",
              },
            ],
            "type": "array",
          },
          "separator": "-",
          "type": "intrinsic",
        },
        "value": Object {
          "fn": "getProp",
          "logicalId": "Lambda",
          "property": "functionName",
          "type": "intrinsic",
        },
      },
    },
    "parameters": Map {},
    "resources": Map {
      "Topic" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_sns.Topic",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Lambda" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Topic",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "code": Object {
            "fields": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": Object {
                "type": "string",
                "value": "examples/lambda-handler",
              },
            },
            "type": "object",
          },
          "events": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_lambda_event_sources.SnsEventSource": Object {
                    "fn": "ref",
                    "logicalId": "Topic",
                    "type": "intrinsic",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
          "handler": Object {
            "type": "string",
            "value": "index.handler",
          },
          "runtime": Object {
            "type": "string",
            "value": "NODEJS",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "Outputs": Object {
        "FunctionArn": Object {
          "Export": Object {
            "Name": Object {
              "Fn::Join": Array [
                "-",
                Array [
                  Object {
                    "Ref": "AWS::StackName",
                  },
                  "FunctionName",
                ],
              ],
            },
          },
          "Value": Object {
            "CDK::GetProp": "Lambda.functionName",
          },
        },
      },
      "Resources": Object {
        "Lambda": Object {
          "Properties": Object {
            "code": Object {
              "aws-cdk-lib.aws_lambda.Code.fromAsset": "examples/lambda-handler",
            },
            "events": Array [
              Object {
                "aws-cdk-lib.aws_lambda_event_sources.SnsEventSource": Object {
                  "Ref": "Topic",
                },
              },
            ],
            "handler": "index.handler",
            "runtime": "NODEJS",
          },
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
        "Topic": Object {
          "Type": "aws-cdk-lib.aws_sns.Topic",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`method-calls.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "SourceBucket" => Set {},
      "BusinessLogic" => Set {
        "SourceBucket",
      },
      "MyFunction" => Set {
        "BusinessLogic",
      },
      "ReadBucket" => Set {},
      "GrantRead" => Set {
        "ReadBucket",
        "MyFunction",
      },
      "WriteBucket" => Set {},
      "GrantWrite" => Set {
        "WriteBucket",
        "MyFunction",
      },
      "Alias" => Set {
        "MyFunction",
      },
      "ConfigureAsyncInvokeStatement" => Set {
        "Alias",
      },
    },
    "keys": Set {
      "SourceBucket",
      "ReadBucket",
      "WriteBucket",
      "BusinessLogic",
      "MyFunction",
      "GrantRead",
      "GrantWrite",
      "Alias",
      "ConfigureAsyncInvokeStatement",
    },
    "nodes": Object {
      "Alias": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "type": "string",
                "value": "live",
              },
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "logicalId": "MyFunction",
          "method": "addAlias",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "Alias",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "BusinessLogic": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "reference": Object {
                  "fn": "ref",
                  "logicalId": "SourceBucket",
                  "type": "intrinsic",
                },
                "type": "resolve-reference",
              },
              Object {
                "type": "string",
                "value": "foo-bar",
              },
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "fqn": "aws-cdk-lib.aws_lambda.Code",
          "method": "fromBucket",
          "namespace": "aws_lambda",
          "type": "staticMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "BusinessLogic",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "ConfigureAsyncInvokeStatement": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "retryAttempts": Object {
                    "type": "number",
                    "value": 2,
                  },
                },
                "type": "struct",
              },
            ],
            "type": "array",
          },
          "logicalId": "Alias",
          "method": "configureAsyncInvoke",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "ConfigureAsyncInvokeStatement",
        "namespace": undefined,
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "GrantRead": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "reference": Object {
                  "fn": "ref",
                  "logicalId": "MyFunction",
                  "type": "intrinsic",
                },
                "type": "resolve-reference",
              },
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "logicalId": "ReadBucket",
          "method": "grantRead",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "GrantRead",
        "namespace": "aws_iam",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "GrantWrite": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "reference": Object {
                  "fn": "ref",
                  "logicalId": "MyFunction",
                  "type": "intrinsic",
                },
                "type": "resolve-reference",
              },
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "logicalId": "WriteBucket",
          "method": "grantWrite",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "GrantWrite",
        "namespace": "aws_iam",
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "MyFunction": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_lambda.Function",
        "logicalId": "MyFunction",
        "namespace": "aws_lambda",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "code": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "BusinessLogic",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
            "handler": Object {
              "type": "string",
              "value": "index.handler",
            },
            "runtime": Object {
              "fqn": "aws-cdk-lib.aws_lambda.Runtime",
              "namespace": "aws_lambda",
              "property": "NODEJS_14_X",
              "type": "staticProperty",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "ReadBucket": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "reference": Object {
                  "fn": "ref",
                  "logicalId": "CDK::Scope",
                  "type": "intrinsic",
                },
                "type": "resolve-reference",
              },
              Object {
                "errorMessage": "Call to aws-cdk-lib.aws_s3.Bucket.fromBucketName with parameters:

[{\\"type\\":\\"string\\",\\"value\\":\\"read-bucket\\"}]

failed because the id could not be inferred. Use the intrinsic function CDK::Args to pass scope and id explicitly.",
                "fn": "lazyLogicalId",
                "type": "intrinsic",
                "value": "ReadBucket",
              },
              Object {
                "type": "string",
                "value": "read-bucket",
              },
            ],
            "type": "array",
          },
          "fqn": "aws-cdk-lib.aws_s3.Bucket",
          "method": "fromBucketName",
          "namespace": "aws_s3",
          "type": "staticMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "ReadBucket",
        "namespace": undefined,
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "SourceBucket": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_s3.Bucket",
        "logicalId": "SourceBucket",
        "namespace": "aws_s3",
        "overrides": Array [],
        "props": Object {
          "fields": Object {},
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "WriteBucket": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "reference": Object {
                  "fn": "ref",
                  "logicalId": "CDK::Scope",
                  "type": "intrinsic",
                },
                "type": "resolve-reference",
              },
              Object {
                "type": "string",
                "value": "WriteBucket",
              },
              Object {
                "type": "string",
                "value": "write-bucket",
              },
            ],
            "type": "array",
          },
          "fqn": "aws-cdk-lib.aws_s3.Bucket",
          "method": "fromBucketName",
          "namespace": "aws_s3",
          "type": "staticMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "WriteBucket",
        "namespace": undefined,
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "SourceBucket" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_s3.Bucket",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "BusinessLogic" => Object {
        "call": Object {
          "fields": Object {
            "aws-cdk-lib.aws_lambda.Code.fromBucket": Object {
              "array": Array [
                Object {
                  "fn": "ref",
                  "logicalId": "SourceBucket",
                  "type": "intrinsic",
                },
                Object {
                  "type": "string",
                  "value": "foo-bar",
                },
              ],
              "type": "array",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "SourceBucket",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Code",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "MyFunction" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "BusinessLogic",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "code": Object {
            "fn": "ref",
            "logicalId": "BusinessLogic",
            "type": "intrinsic",
          },
          "handler": Object {
            "type": "string",
            "value": "index.handler",
          },
          "runtime": Object {
            "type": "string",
            "value": "NODEJS_14_X",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Function",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "ReadBucket" => Object {
        "call": Object {
          "fields": Object {
            "aws-cdk-lib.aws_s3.Bucket.fromBucketName": Object {
              "type": "string",
              "value": "read-bucket",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": undefined,
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "GrantRead" => Object {
        "call": Object {
          "fields": Object {
            "grantRead": Object {
              "fn": "ref",
              "logicalId": "MyFunction",
              "type": "intrinsic",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "ReadBucket",
          "MyFunction",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "ReadBucket",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_iam.Grant",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "WriteBucket" => Object {
        "call": Object {
          "fields": Object {
            "aws-cdk-lib.aws_s3.Bucket.fromBucketName": Object {
              "array": Array [
                Object {
                  "fn": "ref",
                  "logicalId": "CDK::Scope",
                  "type": "intrinsic",
                },
                Object {
                  "type": "string",
                  "value": "WriteBucket",
                },
                Object {
                  "type": "string",
                  "value": "write-bucket",
                },
              ],
              "fn": "args",
              "type": "intrinsic",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "CDK::Scope",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": undefined,
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "GrantWrite" => Object {
        "call": Object {
          "fields": Object {
            "grantWrite": Object {
              "fn": "ref",
              "logicalId": "MyFunction",
              "type": "intrinsic",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "WriteBucket",
          "MyFunction",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "WriteBucket",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_iam.Grant",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Alias" => Object {
        "call": Object {
          "fields": Object {
            "addAlias": Object {
              "array": Array [
                Object {
                  "type": "string",
                  "value": "live",
                },
              ],
              "type": "array",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "MyFunction",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "MyFunction",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_lambda.Alias",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "ConfigureAsyncInvokeStatement" => Object {
        "call": Object {
          "fields": Object {
            "configureAsyncInvoke": Object {
              "fields": Object {
                "retryAttempts": Object {
                  "type": "number",
                  "value": 2,
                },
              },
              "type": "object",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Alias",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "Alias",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": undefined,
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "AWSTemplateFormatVersion": "2010-09-09",
      "Resources": Object {
        "Alias": Object {
          "Call": Object {
            "addAlias": Array [
              "live",
            ],
          },
          "On": "MyFunction",
          "Type": "aws-cdk-lib.aws_lambda.Alias",
        },
        "BusinessLogic": Object {
          "Call": Object {
            "aws-cdk-lib.aws_lambda.Code.fromBucket": Array [
              Object {
                "Ref": "SourceBucket",
              },
              "foo-bar",
            ],
          },
          "Type": "aws-cdk-lib.aws_lambda.Code",
        },
        "ConfigureAsyncInvokeStatement": Object {
          "Call": Object {
            "configureAsyncInvoke": Object {
              "retryAttempts": 2,
            },
          },
          "On": "Alias",
        },
        "GrantRead": Object {
          "Call": Object {
            "grantRead": Object {
              "Ref": "MyFunction",
            },
          },
          "On": "ReadBucket",
          "Type": "aws-cdk-lib.aws_iam.Grant",
        },
        "GrantWrite": Object {
          "Call": Object {
            "grantWrite": Object {
              "Ref": "MyFunction",
            },
          },
          "On": "WriteBucket",
          "Type": "aws-cdk-lib.aws_iam.Grant",
        },
        "MyFunction": Object {
          "Properties": Object {
            "code": Object {
              "Ref": "BusinessLogic",
            },
            "handler": "index.handler",
            "runtime": "NODEJS_14_X",
          },
          "Type": "aws-cdk-lib.aws_lambda.Function",
        },
        "ReadBucket": Object {
          "Call": Object {
            "aws-cdk-lib.aws_s3.Bucket.fromBucketName": "read-bucket",
          },
        },
        "SourceBucket": Object {
          "Type": "aws-cdk-lib.aws_s3.Bucket",
        },
        "WriteBucket": Object {
          "Call": Object {
            "aws-cdk-lib.aws_s3.Bucket.fromBucketName": Object {
              "CDK::Args": Array [
                Object {
                  "Ref": "CDK::Scope",
                },
                "WriteBucket",
                "write-bucket",
              ],
            },
          },
        },
      },
    },
    "templateFormatVersion": "2010-09-09",
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`pipeline.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "Repo" => Set {
        "Key",
        "BuildProject",
      },
      "BuildProject" => Set {
        "Key",
      },
      "Key" => Set {},
      "Pipeline" => Set {
        "Repo",
        "BuildProject",
      },
    },
    "keys": Set {
      "Key",
      "BuildProject",
      "Repo",
      "Pipeline",
    },
    "nodes": Object {
      "BuildProject": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_codebuild.PipelineProject",
        "logicalId": "BuildProject",
        "namespace": "aws_codebuild",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "encryptionKey": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "Key",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Key": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_kms.Key",
        "logicalId": "Key",
        "namespace": "aws_kms",
        "overrides": Array [],
        "props": Object {
          "fields": Object {},
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Pipeline": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_codepipeline.Pipeline",
        "logicalId": "Pipeline",
        "namespace": "aws_codepipeline",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "stages": Object {
              "array": Array [
                Object {
                  "fields": Object {
                    "actions": Object {
                      "array": Array [
                        Object {
                          "args": Object {
                            "array": Array [
                              Object {
                                "fields": Object {
                                  "actionName": Object {
                                    "type": "string",
                                    "value": "Source",
                                  },
                                  "output": Object {
                                    "args": Object {
                                      "array": Array [
                                        Object {
                                          "type": "string",
                                          "value": "Source",
                                        },
                                      ],
                                      "type": "array",
                                    },
                                    "fqn": "aws-cdk-lib.aws_codepipeline.Artifact",
                                    "method": "artifact",
                                    "namespace": "aws_codepipeline",
                                    "type": "staticMethodCall",
                                  },
                                  "repository": Object {
                                    "reference": Object {
                                      "fn": "ref",
                                      "logicalId": "Repo",
                                      "type": "intrinsic",
                                    },
                                    "type": "resolve-reference",
                                  },
                                },
                                "type": "struct",
                              },
                            ],
                            "type": "array",
                          },
                          "fqn": "aws-cdk-lib.aws_codepipeline_actions.CodeCommitSourceAction",
                          "namespace": "aws_codepipeline_actions",
                          "type": "initializer",
                        },
                      ],
                      "type": "array",
                    },
                    "stageName": Object {
                      "type": "string",
                      "value": "Source",
                    },
                  },
                  "type": "struct",
                },
                Object {
                  "fields": Object {
                    "actions": Object {
                      "array": Array [
                        Object {
                          "args": Object {
                            "array": Array [
                              Object {
                                "fields": Object {
                                  "actionName": Object {
                                    "type": "string",
                                    "value": "Build",
                                  },
                                  "input": Object {
                                    "args": Object {
                                      "array": Array [
                                        Object {
                                          "type": "string",
                                          "value": "Source",
                                        },
                                      ],
                                      "type": "array",
                                    },
                                    "fqn": "aws-cdk-lib.aws_codepipeline.Artifact",
                                    "method": "artifact",
                                    "namespace": "aws_codepipeline",
                                    "type": "staticMethodCall",
                                  },
                                  "outputs": Object {
                                    "array": Array [
                                      Object {
                                        "args": Object {
                                          "array": Array [
                                            Object {
                                              "type": "string",
                                              "value": "Build",
                                            },
                                          ],
                                          "type": "array",
                                        },
                                        "fqn": "aws-cdk-lib.aws_codepipeline.Artifact",
                                        "method": "artifact",
                                        "namespace": "aws_codepipeline",
                                        "type": "staticMethodCall",
                                      },
                                    ],
                                    "type": "array",
                                  },
                                  "project": Object {
                                    "reference": Object {
                                      "fn": "ref",
                                      "logicalId": "BuildProject",
                                      "type": "intrinsic",
                                    },
                                    "type": "resolve-reference",
                                  },
                                },
                                "type": "struct",
                              },
                            ],
                            "type": "array",
                          },
                          "fqn": "aws-cdk-lib.aws_codepipeline_actions.CodeBuildAction",
                          "namespace": "aws_codepipeline_actions",
                          "type": "initializer",
                        },
                      ],
                      "type": "array",
                    },
                    "stageName": Object {
                      "type": "string",
                      "value": "Build",
                    },
                  },
                  "type": "struct",
                },
                Object {
                  "fields": Object {
                    "actions": Object {
                      "array": Array [
                        Object {
                          "args": Object {
                            "array": Array [
                              Object {
                                "fields": Object {
                                  "actionName": Object {
                                    "type": "string",
                                    "value": "Deploy",
                                  },
                                  "adminPermissions": Object {
                                    "type": "boolean",
                                    "value": true,
                                  },
                                  "stackName": Object {
                                    "type": "string",
                                    "value": "MyStack",
                                  },
                                  "templatePath": Object {
                                    "args": Object {
                                      "array": Array [
                                        Object {
                                          "type": "string",
                                          "value": "Build",
                                        },
                                        Object {
                                          "type": "string",
                                          "value": "template.yaml",
                                        },
                                      ],
                                      "type": "array",
                                    },
                                    "fqn": "aws-cdk-lib.aws_codepipeline.ArtifactPath",
                                    "method": "artifactPath",
                                    "namespace": "aws_codepipeline",
                                    "type": "staticMethodCall",
                                  },
                                },
                                "type": "struct",
                              },
                            ],
                            "type": "array",
                          },
                          "fqn": "aws-cdk-lib.aws_codepipeline_actions.CloudFormationCreateUpdateStackAction",
                          "namespace": "aws_codepipeline_actions",
                          "type": "initializer",
                        },
                      ],
                      "type": "array",
                    },
                    "stageName": Object {
                      "type": "string",
                      "value": "Deploy",
                    },
                  },
                  "type": "struct",
                },
              ],
              "type": "array",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "Repo": Object {
        "dependsOn": Array [
          "Key",
          "BuildProject",
        ],
        "fqn": "aws-cdk-lib.aws_codecommit.Repository",
        "logicalId": "Repo",
        "namespace": "aws_codecommit",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "repositoryName": Object {
              "type": "string",
              "value": "my-first-decdk-repo",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": "A template creates a CodePipeline along with its CodeCommit repository source",
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "Repo" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Key",
          "BuildProject",
        },
        "dependsOn": Set {
          "Key",
          "BuildProject",
        },
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "repositoryName": Object {
            "type": "string",
            "value": "my-first-decdk-repo",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_codecommit.Repository",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "BuildProject" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Key",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "encryptionKey": Object {
            "fn": "ref",
            "logicalId": "Key",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_codebuild.PipelineProject",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Key" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_kms.Key",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "Pipeline" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "Repo",
          "BuildProject",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "stages": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "actions": Object {
                    "array": Array [
                      Object {
                        "fields": Object {
                          "aws-cdk-lib.aws_codepipeline_actions.CodeCommitSourceAction": Object {
                            "fields": Object {
                              "actionName": Object {
                                "type": "string",
                                "value": "Source",
                              },
                              "output": Object {
                                "fields": Object {
                                  "aws-cdk-lib.aws_codepipeline.Artifact.artifact": Object {
                                    "type": "string",
                                    "value": "Source",
                                  },
                                },
                                "type": "object",
                              },
                              "repository": Object {
                                "fn": "ref",
                                "logicalId": "Repo",
                                "type": "intrinsic",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "stageName": Object {
                    "type": "string",
                    "value": "Source",
                  },
                },
                "type": "object",
              },
              Object {
                "fields": Object {
                  "actions": Object {
                    "array": Array [
                      Object {
                        "fields": Object {
                          "aws-cdk-lib.aws_codepipeline_actions.CodeBuildAction": Object {
                            "fields": Object {
                              "actionName": Object {
                                "type": "string",
                                "value": "Build",
                              },
                              "input": Object {
                                "fields": Object {
                                  "aws-cdk-lib.aws_codepipeline.Artifact.artifact": Object {
                                    "type": "string",
                                    "value": "Source",
                                  },
                                },
                                "type": "object",
                              },
                              "outputs": Object {
                                "array": Array [
                                  Object {
                                    "fields": Object {
                                      "aws-cdk-lib.aws_codepipeline.Artifact.artifact": Object {
                                        "type": "string",
                                        "value": "Build",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                                "type": "array",
                              },
                              "project": Object {
                                "fn": "ref",
                                "logicalId": "BuildProject",
                                "type": "intrinsic",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "stageName": Object {
                    "type": "string",
                    "value": "Build",
                  },
                },
                "type": "object",
              },
              Object {
                "fields": Object {
                  "actions": Object {
                    "array": Array [
                      Object {
                        "fields": Object {
                          "aws-cdk-lib.aws_codepipeline_actions.CloudFormationCreateUpdateStackAction": Object {
                            "fields": Object {
                              "actionName": Object {
                                "type": "string",
                                "value": "Deploy",
                              },
                              "adminPermissions": Object {
                                "type": "boolean",
                                "value": true,
                              },
                              "stackName": Object {
                                "type": "string",
                                "value": "MyStack",
                              },
                              "templatePath": Object {
                                "fields": Object {
                                  "aws-cdk-lib.aws_codepipeline.ArtifactPath.artifactPath": Object {
                                    "array": Array [
                                      Object {
                                        "type": "string",
                                        "value": "Build",
                                      },
                                      Object {
                                        "type": "string",
                                        "value": "template.yaml",
                                      },
                                    ],
                                    "type": "array",
                                  },
                                },
                                "type": "object",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  "stageName": Object {
                    "type": "string",
                    "value": "Deploy",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_codepipeline.Pipeline",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "A template creates a CodePipeline along with its CodeCommit repository source",
      "Resources": Object {
        "BuildProject": Object {
          "Properties": Object {
            "encryptionKey": Object {
              "Ref": "Key",
            },
          },
          "Type": "aws-cdk-lib.aws_codebuild.PipelineProject",
        },
        "Key": Object {
          "Type": "aws-cdk-lib.aws_kms.Key",
        },
        "Pipeline": Object {
          "Properties": Object {
            "stages": Array [
              Object {
                "actions": Array [
                  Object {
                    "aws-cdk-lib.aws_codepipeline_actions.CodeCommitSourceAction": Object {
                      "actionName": "Source",
                      "output": Object {
                        "aws-cdk-lib.aws_codepipeline.Artifact.artifact": "Source",
                      },
                      "repository": Object {
                        "Ref": "Repo",
                      },
                    },
                  },
                ],
                "stageName": "Source",
              },
              Object {
                "actions": Array [
                  Object {
                    "aws-cdk-lib.aws_codepipeline_actions.CodeBuildAction": Object {
                      "actionName": "Build",
                      "input": Object {
                        "aws-cdk-lib.aws_codepipeline.Artifact.artifact": "Source",
                      },
                      "outputs": Array [
                        Object {
                          "aws-cdk-lib.aws_codepipeline.Artifact.artifact": "Build",
                        },
                      ],
                      "project": Object {
                        "Ref": "BuildProject",
                      },
                    },
                  },
                ],
                "stageName": "Build",
              },
              Object {
                "actions": Array [
                  Object {
                    "aws-cdk-lib.aws_codepipeline_actions.CloudFormationCreateUpdateStackAction": Object {
                      "actionName": "Deploy",
                      "adminPermissions": true,
                      "stackName": "MyStack",
                      "templatePath": Object {
                        "aws-cdk-lib.aws_codepipeline.ArtifactPath.artifactPath": Array [
                          "Build",
                          "template.yaml",
                        ],
                      },
                    },
                  },
                ],
                "stageName": "Deploy",
              },
            ],
          },
          "Type": "aws-cdk-lib.aws_codepipeline.Pipeline",
        },
        "Repo": Object {
          "DependsOn": Array [
            "Key",
            "BuildProject",
          ],
          "Properties": Object {
            "repositoryName": "my-first-decdk-repo",
          },
          "Type": "aws-cdk-lib.aws_codecommit.Repository",
        },
      },
    },
    "templateFormatVersion": "2010-09-09",
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`pure-cfn.json 1`] = `
TypedTemplate {
  "conditions": Map {
    "CreateLogGroup" => Object {
      "fn": "and",
      "operands": Array [
        Object {
          "fn": "equals",
          "type": "intrinsic",
          "value1": Object {
            "fn": "ref",
            "logicalId": "Stage",
            "type": "intrinsic",
          },
          "value2": Object {
            "type": "string",
            "value": "Prod",
          },
        },
        Object {
          "fn": "equals",
          "type": "intrinsic",
          "value1": Object {
            "fn": "ref",
            "logicalId": "AWS::Region",
            "type": "intrinsic",
          },
          "value2": Object {
            "type": "string",
            "value": "us-east-1",
          },
        },
      ],
      "type": "intrinsic",
    },
  },
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {
    "LogGroupArn" => Object {
      "conditionName": undefined,
      "description": "Return log group arn",
      "exportName": Object {
        "type": "string",
        "value": "MyLogGroupArn",
      },
      "value": Object {
        "attribute": Object {
          "type": "string",
          "value": "Arn",
        },
        "fn": "getAtt",
        "logicalId": "MyLogGroup",
        "type": "intrinsic",
      },
    },
  },
  "parameters": Map {
    "Stage" => Object {
      "allowedPattern": undefined,
      "allowedValues": undefined,
      "constraintDescription": undefined,
      "default": "Prod",
      "description": undefined,
      "maxLength": undefined,
      "maxValue": undefined,
      "minLength": undefined,
      "minValue": undefined,
      "noEcho": undefined,
      "type": "String",
    },
  },
  "resources": DependencyGraph {
    "_dependencies": Map {
      "Hello" => Set {},
      "MyLogGroup" => Set {},
    },
    "keys": Set {
      "Hello",
      "MyLogGroup",
    },
    "nodes": Object {
      "Hello": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_sqs.Queue",
        "logicalId": "Hello",
        "namespace": "aws_sqs",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "encryption": Object {
              "choice": "UNENCRYPTED",
              "fqn": "aws-cdk-lib.aws_sqs.QueueEncryption",
              "namespace": "aws_sqs",
              "type": "enum",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "MyLogGroup": Object {
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.CfnResource",
        "logicalId": "MyLogGroup",
        "metadata": Object {},
        "namespace": undefined,
        "props": Object {
          "fields": Object {
            "properties": Object {
              "fields": Object {
                "LogGroupName": Object {
                  "type": "any",
                  "value": Object {
                    "fn": "ref",
                    "logicalId": "AWS::AccountId",
                    "type": "intrinsic",
                  },
                },
              },
              "type": "object",
            },
            "type": Object {
              "type": "string",
              "value": "AWS::Logs::LogGroup",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "resource",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
  },
  "template": Template {
    "conditions": Map {
      "CreateLogGroup" => Object {
        "fn": "and",
        "operands": Array [
          Object {
            "fn": "equals",
            "type": "intrinsic",
            "value1": Object {
              "fn": "ref",
              "logicalId": "Stage",
              "type": "intrinsic",
            },
            "value2": Object {
              "type": "string",
              "value": "Prod",
            },
          },
          Object {
            "fn": "equals",
            "type": "intrinsic",
            "value1": Object {
              "fn": "ref",
              "logicalId": "AWS::Region",
              "type": "intrinsic",
            },
            "value2": Object {
              "type": "string",
              "value": "us-east-1",
            },
          },
        ],
        "type": "intrinsic",
      },
    },
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {
      "LogGroupArn" => Object {
        "conditionName": undefined,
        "description": "Return log group arn",
        "exportName": Object {
          "type": "string",
          "value": "MyLogGroupArn",
        },
        "value": Object {
          "attribute": Object {
            "type": "string",
            "value": "Arn",
          },
          "fn": "getAtt",
          "logicalId": "MyLogGroup",
          "type": "intrinsic",
        },
      },
    },
    "parameters": Map {
      "Stage" => Object {
        "allowedPattern": undefined,
        "allowedValues": undefined,
        "constraintDescription": undefined,
        "default": "Prod",
        "description": undefined,
        "maxLength": undefined,
        "maxValue": undefined,
        "minLength": undefined,
        "minValue": undefined,
        "noEcho": undefined,
        "type": "String",
      },
    },
    "resources": Map {
      "Hello" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "encryption": Object {
            "type": "string",
            "value": "UNENCRYPTED",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_sqs.Queue",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "MyLogGroup" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": "CreateLogGroup",
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "AWS::AccountId",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "LogGroupName": Object {
            "fn": "ref",
            "logicalId": "AWS::AccountId",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "AWS::Logs::LogGroup",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "AWSTemplateFormatVersion": "2010-09-09",
      "Conditions": Object {
        "CreateLogGroup": Object {
          "Fn::And": Array [
            Object {
              "Fn::Equals": Array [
                Object {
                  "Ref": "Stage",
                },
                "Prod",
              ],
            },
            Object {
              "Fn::Equals": Array [
                Object {
                  "Ref": "AWS::Region",
                },
                "us-east-1",
              ],
            },
          ],
        },
      },
      "Outputs": Object {
        "LogGroupArn": Object {
          "Description": "Return log group arn",
          "Export": Object {
            "Name": "MyLogGroupArn",
          },
          "Value": Object {
            "Fn::GetAtt": Array [
              "MyLogGroup",
              "Arn",
            ],
          },
        },
      },
      "Parameters": Object {
        "Stage": Object {
          "Default": "Prod",
          "Type": "String",
        },
      },
      "Resources": Object {
        "Hello": Object {
          "Properties": Object {
            "encryption": "UNENCRYPTED",
          },
          "Type": "aws-cdk-lib.aws_sqs.Queue",
        },
        "MyLogGroup": Object {
          "Condition": "CreateLogGroup",
          "Properties": Object {
            "LogGroupName": Object {
              "Ref": "AWS::AccountId",
            },
          },
          "Type": "AWS::Logs::LogGroup",
        },
      },
    },
    "templateFormatVersion": "2010-09-09",
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`queue-kms.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {
    "Instances" => Object {
      "fields": Object {
        "Description": Object {
          "type": "string",
          "value": "Information about the instances",
        },
      },
      "type": "object",
    },
    "Databases" => Object {
      "fields": Object {
        "Description": Object {
          "type": "string",
          "value": "Information about the databases",
        },
      },
      "type": "object",
    },
  },
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "MyQueue" => Set {},
    },
    "keys": Set {
      "MyQueue",
    },
    "nodes": Object {
      "MyQueue": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_sqs.Queue",
        "logicalId": "MyQueue",
        "namespace": "aws_sqs",
        "overrides": Array [
          Object {
            "childConstructPath": "Key",
            "delete": Object {
              "path": "Properties.Description",
            },
          },
        ],
        "props": Object {
          "fields": Object {
            "encryption": Object {
              "choice": "KMS",
              "fqn": "aws-cdk-lib.aws_sqs.QueueEncryption",
              "namespace": "aws_sqs",
              "type": "enum",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {
      "Instances" => Object {
        "fields": Object {
          "Description": Object {
            "type": "string",
            "value": "Information about the instances",
          },
        },
        "type": "object",
      },
      "Databases" => Object {
        "fields": Object {
          "Description": Object {
            "type": "string",
            "value": "Information about the databases",
          },
        },
        "type": "object",
      },
    },
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "MyQueue" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [
          Object {
            "childConstructPath": "Key",
            "delete": Object {
              "path": "Properties.Description",
            },
          },
        ],
        "properties": Object {
          "encryption": Object {
            "type": "string",
            "value": "KMS",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_sqs.Queue",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "Metadata": Object {
        "Databases": Object {
          "Description": "Information about the databases",
        },
        "Instances": Object {
          "Description": "Information about the instances",
        },
      },
      "Resources": Object {
        "MyQueue": Object {
          "Overrides": Array [
            Object {
              "ChildConstructPath": "Key",
              "Delete": Object {
                "Path": "Properties.Description",
              },
            },
          ],
          "Properties": Object {
            "encryption": "KMS",
          },
          "Type": "aws-cdk-lib.aws_sqs.Queue",
        },
      },
      "Transform": "AWS::LanguageExtensions",
    },
    "templateFormatVersion": undefined,
    "transform": Array [
      "AWS::LanguageExtensions",
    ],
  },
  "transform": Array [
    "AWS::LanguageExtensions",
  ],
}
`;

exports[`static-site.yaml 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {
    "DomainName" => Object {
      "allowedPattern": undefined,
      "allowedValues": undefined,
      "constraintDescription": undefined,
      "default": "www.example.com",
      "description": undefined,
      "maxLength": undefined,
      "maxValue": undefined,
      "minLength": undefined,
      "minValue": undefined,
      "noEcho": undefined,
      "type": "String",
    },
    "HostedZoneId" => Object {
      "allowedPattern": undefined,
      "allowedValues": undefined,
      "constraintDescription": undefined,
      "default": undefined,
      "description": undefined,
      "maxLength": undefined,
      "maxValue": undefined,
      "minLength": undefined,
      "minValue": undefined,
      "noEcho": undefined,
      "type": "String",
    },
  },
  "resources": DependencyGraph {
    "_dependencies": Map {
      "CloudFrontOAI" => Set {},
      "SiteBucket" => Set {},
      "SiteBucketAccess" => Set {
        "SiteBucket",
        "CloudFrontOAI",
      },
      "HostedZone" => Set {},
      "SiteCertificate" => Set {
        "HostedZone",
      },
      "SiteDistribution" => Set {
        "SiteCertificate",
        "SiteBucket",
        "CloudFrontOAI",
      },
      "SiteAliasRecord" => Set {
        "HostedZone",
        "SiteDistribution",
      },
      "SiteDeployment" => Set {
        "SiteBucket",
        "SiteDistribution",
      },
    },
    "keys": Set {
      "CloudFrontOAI",
      "SiteBucket",
      "HostedZone",
      "SiteBucketAccess",
      "SiteCertificate",
      "SiteDistribution",
      "SiteAliasRecord",
      "SiteDeployment",
    },
    "nodes": Object {
      "CloudFrontOAI": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_cloudfront.OriginAccessIdentity",
        "logicalId": "CloudFrontOAI",
        "namespace": "aws_cloudfront",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "comment": Object {
              "fn": "join",
              "list": Object {
                "array": Array [
                  Object {
                    "type": "string",
                    "value": "OAI",
                  },
                  Object {
                    "type": "string",
                    "value": "for",
                  },
                  Object {
                    "fn": "ref",
                    "logicalId": "DomainName",
                    "type": "intrinsic",
                  },
                ],
                "type": "array",
              },
              "separator": " ",
              "type": "intrinsic",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "HostedZone": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "reference": Object {
                  "fn": "ref",
                  "logicalId": "CDK::Scope",
                  "type": "intrinsic",
                },
                "type": "resolve-reference",
              },
              Object {
                "errorMessage": "Call to aws-cdk-lib.aws_route53.HostedZone.fromHostedZoneAttributes with parameters:

[{\\"type\\":\\"object\\",\\"fields\\":{\\"hostedZoneId\\":{\\"type\\":\\"intrinsic\\",\\"fn\\":\\"ref\\",\\"logicalId\\":\\"HostedZoneId\\"},\\"zoneName\\":{\\"type\\":\\"intrinsic\\",\\"fn\\":\\"ref\\",\\"logicalId\\":\\"DomainName\\"}}}]

failed because the id could not be inferred. Use the intrinsic function CDK::Args to pass scope and id explicitly.",
                "fn": "lazyLogicalId",
                "type": "intrinsic",
                "value": "HostedZone",
              },
              Object {
                "fields": Object {
                  "hostedZoneId": Object {
                    "fn": "ref",
                    "logicalId": "HostedZoneId",
                    "type": "intrinsic",
                  },
                  "zoneName": Object {
                    "fn": "ref",
                    "logicalId": "DomainName",
                    "type": "intrinsic",
                  },
                },
                "type": "struct",
              },
            ],
            "type": "array",
          },
          "fqn": "aws-cdk-lib.aws_route53.HostedZone",
          "method": "fromHostedZoneAttributes",
          "namespace": "aws_route53",
          "type": "staticMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "HostedZone",
        "namespace": undefined,
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "SiteAliasRecord": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_route53.ARecord",
        "logicalId": "SiteAliasRecord",
        "namespace": "aws_route53",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "recordName": Object {
              "type": "string",
              "value": "www",
            },
            "target": Object {
              "args": Object {
                "array": Array [
                  Object {
                    "args": Object {
                      "array": Array [
                        Object {
                          "reference": Object {
                            "fn": "ref",
                            "logicalId": "SiteDistribution",
                            "type": "intrinsic",
                          },
                          "type": "resolve-reference",
                        },
                      ],
                      "type": "array",
                    },
                    "fqn": "aws-cdk-lib.aws_route53_targets.CloudFrontTarget",
                    "namespace": "aws_route53_targets",
                    "type": "initializer",
                  },
                ],
                "type": "array",
              },
              "fqn": "aws-cdk-lib.aws_route53.RecordTarget",
              "method": "fromAlias",
              "namespace": "aws_route53",
              "type": "staticMethodCall",
            },
            "zone": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "HostedZone",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "SiteBucket": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_s3.Bucket",
        "logicalId": "SiteBucket",
        "namespace": "aws_s3",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "autoDeleteObjects": Object {
              "type": "boolean",
              "value": true,
            },
            "blockPublicAccess": Object {
              "fqn": "aws-cdk-lib.aws_s3.BlockPublicAccess",
              "namespace": "aws_s3",
              "property": "BLOCK_ALL",
              "type": "staticProperty",
            },
            "publicReadAccess": Object {
              "type": "boolean",
              "value": false,
            },
            "removalPolicy": Object {
              "choice": "DESTROY",
              "fqn": "aws-cdk-lib.RemovalPolicy",
              "namespace": undefined,
              "type": "enum",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "SiteBucketAccess": Object {
        "call": Object {
          "args": Object {
            "array": Array [
              Object {
                "reference": Object {
                  "fn": "ref",
                  "logicalId": "CloudFrontOAI",
                  "type": "intrinsic",
                },
                "type": "resolve-reference",
              },
              Object {
                "type": "void",
              },
            ],
            "type": "array",
          },
          "logicalId": "SiteBucket",
          "method": "grantRead",
          "type": "instanceMethodCall",
        },
        "dependsOn": Array [],
        "logicalId": "SiteBucketAccess",
        "namespace": undefined,
        "overrides": Array [],
        "tags": Array [],
        "type": "lazyResource",
      },
      "SiteCertificate": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_certificatemanager.DnsValidatedCertificate",
        "logicalId": "SiteCertificate",
        "namespace": "aws_certificatemanager",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "domainName": Object {
              "fn": "ref",
              "logicalId": "DomainName",
              "type": "intrinsic",
            },
            "hostedZone": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "HostedZone",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
            "region": Object {
              "fn": "ref",
              "logicalId": "AWS::Region",
              "type": "intrinsic",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "SiteDeployment": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_s3_deployment.BucketDeployment",
        "logicalId": "SiteDeployment",
        "namespace": "aws_s3_deployment",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "destinationBucket": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "SiteBucket",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
            "distribution": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "SiteDistribution",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
            "distributionPaths": Object {
              "array": Array [
                Object {
                  "type": "string",
                  "value": "/*",
                },
              ],
              "type": "array",
            },
            "sources": Object {
              "array": Array [
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "index.html",
                      },
                      Object {
                        "fn": "join",
                        "list": Object {
                          "array": Array [
                            Object {
                              "type": "string",
                              "value": "Hello from ",
                            },
                            Object {
                              "fn": "ref",
                              "logicalId": "DomainName",
                              "type": "intrinsic",
                            },
                          ],
                          "type": "array",
                        },
                        "separator": "",
                        "type": "intrinsic",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_s3_deployment.Source",
                  "method": "data",
                  "namespace": "aws_s3_deployment",
                  "type": "staticMethodCall",
                },
                Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "error.html",
                      },
                      Object {
                        "type": "string",
                        "value": "Woof woof! Something went wrong.",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_s3_deployment.Source",
                  "method": "data",
                  "namespace": "aws_s3_deployment",
                  "type": "staticMethodCall",
                },
              ],
              "type": "array",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
      "SiteDistribution": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_cloudfront.Distribution",
        "logicalId": "SiteDistribution",
        "namespace": "aws_cloudfront",
        "overrides": Array [],
        "props": Object {
          "fields": Object {
            "certificate": Object {
              "reference": Object {
                "fn": "ref",
                "logicalId": "SiteCertificate",
                "type": "intrinsic",
              },
              "type": "resolve-reference",
            },
            "defaultBehavior": Object {
              "fields": Object {
                "origin": Object {
                  "args": Object {
                    "array": Array [
                      Object {
                        "reference": Object {
                          "fn": "ref",
                          "logicalId": "SiteBucket",
                          "type": "intrinsic",
                        },
                        "type": "resolve-reference",
                      },
                      Object {
                        "fields": Object {
                          "originAccessIdentity": Object {
                            "reference": Object {
                              "fn": "ref",
                              "logicalId": "CloudFrontOAI",
                              "type": "intrinsic",
                            },
                            "type": "resolve-reference",
                          },
                        },
                        "type": "struct",
                      },
                    ],
                    "type": "array",
                  },
                  "fqn": "aws-cdk-lib.aws_cloudfront_origins.S3Origin",
                  "namespace": "aws_cloudfront_origins",
                  "type": "initializer",
                },
              },
              "type": "struct",
            },
            "defaultRootObject": Object {
              "type": "string",
              "value": "index.html",
            },
            "domainNames": Object {
              "array": Array [
                Object {
                  "fn": "ref",
                  "logicalId": "DomainName",
                  "type": "intrinsic",
                },
              ],
              "type": "array",
            },
            "errorResponses": Object {
              "array": Array [
                Object {
                  "fields": Object {
                    "httpStatus": Object {
                      "type": "number",
                      "value": 403,
                    },
                    "responseHttpStatus": Object {
                      "type": "number",
                      "value": 403,
                    },
                    "responsePagePath": Object {
                      "type": "string",
                      "value": "error.html",
                    },
                    "ttl": Object {
                      "args": Object {
                        "array": Array [
                          Object {
                            "type": "number",
                            "value": 30,
                          },
                        ],
                        "type": "array",
                      },
                      "fqn": "aws-cdk-lib.Duration",
                      "method": "minutes",
                      "namespace": undefined,
                      "type": "staticMethodCall",
                    },
                  },
                  "type": "struct",
                },
              ],
              "type": "array",
            },
            "minimumProtocolVersion": Object {
              "choice": "TLS_V1_2_2021",
              "fqn": "aws-cdk-lib.aws_cloudfront.SecurityPolicyProtocol",
              "namespace": "aws_cloudfront",
              "type": "enum",
            },
          },
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {
      "DomainName" => Object {
        "allowedPattern": undefined,
        "allowedValues": undefined,
        "constraintDescription": undefined,
        "default": "www.example.com",
        "description": undefined,
        "maxLength": undefined,
        "maxValue": undefined,
        "minLength": undefined,
        "minValue": undefined,
        "noEcho": undefined,
        "type": "String",
      },
      "HostedZoneId" => Object {
        "allowedPattern": undefined,
        "allowedValues": undefined,
        "constraintDescription": undefined,
        "default": undefined,
        "description": undefined,
        "maxLength": undefined,
        "maxValue": undefined,
        "minLength": undefined,
        "minValue": undefined,
        "noEcho": undefined,
        "type": "String",
      },
    },
    "resources": Map {
      "CloudFrontOAI" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "DomainName",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "comment": Object {
            "fn": "join",
            "list": Object {
              "array": Array [
                Object {
                  "type": "string",
                  "value": "OAI",
                },
                Object {
                  "type": "string",
                  "value": "for",
                },
                Object {
                  "fn": "ref",
                  "logicalId": "DomainName",
                  "type": "intrinsic",
                },
              ],
              "type": "array",
            },
            "separator": " ",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_cloudfront.OriginAccessIdentity",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "SiteBucket" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "autoDeleteObjects": Object {
            "type": "boolean",
            "value": true,
          },
          "blockPublicAccess": Object {
            "type": "string",
            "value": "BLOCK_ALL",
          },
          "publicReadAccess": Object {
            "type": "boolean",
            "value": false,
          },
          "removalPolicy": Object {
            "type": "string",
            "value": "DESTROY",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_s3.Bucket",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "SiteBucketAccess" => Object {
        "call": Object {
          "fields": Object {
            "grantRead": Object {
              "fn": "ref",
              "logicalId": "CloudFrontOAI",
              "type": "intrinsic",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "SiteBucket",
          "CloudFrontOAI",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": "SiteBucket",
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": undefined,
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "HostedZone" => Object {
        "call": Object {
          "fields": Object {
            "aws-cdk-lib.aws_route53.HostedZone.fromHostedZoneAttributes": Object {
              "fields": Object {
                "hostedZoneId": Object {
                  "fn": "ref",
                  "logicalId": "HostedZoneId",
                  "type": "intrinsic",
                },
                "zoneName": Object {
                  "fn": "ref",
                  "logicalId": "DomainName",
                  "type": "intrinsic",
                },
              },
              "type": "object",
            },
          },
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "HostedZoneId",
          "DomainName",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": undefined,
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "SiteCertificate" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "DomainName",
          "HostedZone",
          "AWS::Region",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "domainName": Object {
            "fn": "ref",
            "logicalId": "DomainName",
            "type": "intrinsic",
          },
          "hostedZone": Object {
            "fn": "ref",
            "logicalId": "HostedZone",
            "type": "intrinsic",
          },
          "region": Object {
            "fn": "ref",
            "logicalId": "AWS::Region",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_certificatemanager.DnsValidatedCertificate",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "SiteDistribution" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "SiteCertificate",
          "DomainName",
          "SiteBucket",
          "CloudFrontOAI",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "certificate": Object {
            "fn": "ref",
            "logicalId": "SiteCertificate",
            "type": "intrinsic",
          },
          "defaultBehavior": Object {
            "fields": Object {
              "origin": Object {
                "fields": Object {
                  "aws-cdk-lib.aws_cloudfront_origins.S3Origin": Object {
                    "array": Array [
                      Object {
                        "fn": "ref",
                        "logicalId": "SiteBucket",
                        "type": "intrinsic",
                      },
                      Object {
                        "fields": Object {
                          "originAccessIdentity": Object {
                            "fn": "ref",
                            "logicalId": "CloudFrontOAI",
                            "type": "intrinsic",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "defaultRootObject": Object {
            "type": "string",
            "value": "index.html",
          },
          "domainNames": Object {
            "array": Array [
              Object {
                "fn": "ref",
                "logicalId": "DomainName",
                "type": "intrinsic",
              },
            ],
            "type": "array",
          },
          "errorResponses": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "httpStatus": Object {
                    "type": "number",
                    "value": 403,
                  },
                  "responseHttpStatus": Object {
                    "type": "number",
                    "value": 403,
                  },
                  "responsePagePath": Object {
                    "type": "string",
                    "value": "error.html",
                  },
                  "ttl": Object {
                    "fields": Object {
                      "aws-cdk-lib.Duration.minutes": Object {
                        "type": "number",
                        "value": 30,
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
          "minimumProtocolVersion": Object {
            "type": "string",
            "value": "TLS_V1_2_2021",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_cloudfront.Distribution",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "SiteAliasRecord" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "HostedZone",
          "SiteDistribution",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "recordName": Object {
            "type": "string",
            "value": "www",
          },
          "target": Object {
            "fields": Object {
              "aws-cdk-lib.aws_route53.RecordTarget.fromAlias": Object {
                "fields": Object {
                  "aws-cdk-lib.aws_route53_targets.CloudFrontTarget": Object {
                    "fn": "ref",
                    "logicalId": "SiteDistribution",
                    "type": "intrinsic",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "zone": Object {
            "fn": "ref",
            "logicalId": "HostedZone",
            "type": "intrinsic",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_route53.ARecord",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
      "SiteDeployment" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {
          "DomainName",
          "SiteBucket",
          "SiteDistribution",
        },
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {
          "destinationBucket": Object {
            "fn": "ref",
            "logicalId": "SiteBucket",
            "type": "intrinsic",
          },
          "distribution": Object {
            "fn": "ref",
            "logicalId": "SiteDistribution",
            "type": "intrinsic",
          },
          "distributionPaths": Object {
            "array": Array [
              Object {
                "type": "string",
                "value": "/*",
              },
            ],
            "type": "array",
          },
          "sources": Object {
            "array": Array [
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_s3_deployment.Source.data": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "index.html",
                      },
                      Object {
                        "fn": "join",
                        "list": Object {
                          "array": Array [
                            Object {
                              "type": "string",
                              "value": "Hello from ",
                            },
                            Object {
                              "fn": "ref",
                              "logicalId": "DomainName",
                              "type": "intrinsic",
                            },
                          ],
                          "type": "array",
                        },
                        "separator": "",
                        "type": "intrinsic",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
              Object {
                "fields": Object {
                  "aws-cdk-lib.aws_s3_deployment.Source.data": Object {
                    "array": Array [
                      Object {
                        "type": "string",
                        "value": "error.html",
                      },
                      Object {
                        "type": "string",
                        "value": "Woof woof! Something went wrong.",
                      },
                    ],
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
        },
        "tags": Array [],
        "type": "aws-cdk-lib.aws_s3_deployment.BucketDeployment",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "Parameters": Object {
        "DomainName": Object {
          "Default": "www.example.com",
          "Type": "String",
        },
        "HostedZoneId": Object {
          "Type": "String",
        },
      },
      "Resources": Object {
        "CloudFrontOAI": Object {
          "Properties": Object {
            "comment": Object {
              "Fn::Join": Array [
                " ",
                Array [
                  "OAI",
                  "for",
                  Object {
                    "Ref": "DomainName",
                  },
                ],
              ],
            },
          },
          "Type": "aws-cdk-lib.aws_cloudfront.OriginAccessIdentity",
        },
        "HostedZone": Object {
          "Call": Object {
            "aws-cdk-lib.aws_route53.HostedZone.fromHostedZoneAttributes": Object {
              "hostedZoneId": Object {
                "Ref": "HostedZoneId",
              },
              "zoneName": Object {
                "Ref": "DomainName",
              },
            },
          },
        },
        "SiteAliasRecord": Object {
          "Properties": Object {
            "recordName": "www",
            "target": Object {
              "aws-cdk-lib.aws_route53.RecordTarget.fromAlias": Object {
                "aws-cdk-lib.aws_route53_targets.CloudFrontTarget": Object {
                  "Ref": "SiteDistribution",
                },
              },
            },
            "zone": Object {
              "Ref": "HostedZone",
            },
          },
          "Type": "aws-cdk-lib.aws_route53.ARecord",
        },
        "SiteBucket": Object {
          "Properties": Object {
            "autoDeleteObjects": true,
            "blockPublicAccess": "BLOCK_ALL",
            "publicReadAccess": false,
            "removalPolicy": "DESTROY",
          },
          "Type": "aws-cdk-lib.aws_s3.Bucket",
        },
        "SiteBucketAccess": Object {
          "Call": Object {
            "grantRead": Object {
              "Ref": "CloudFrontOAI",
            },
          },
          "On": "SiteBucket",
        },
        "SiteCertificate": Object {
          "Properties": Object {
            "domainName": Object {
              "Ref": "DomainName",
            },
            "hostedZone": Object {
              "Ref": "HostedZone",
            },
            "region": Object {
              "Ref": "AWS::Region",
            },
          },
          "Type": "aws-cdk-lib.aws_certificatemanager.DnsValidatedCertificate",
        },
        "SiteDeployment": Object {
          "Properties": Object {
            "destinationBucket": Object {
              "Ref": "SiteBucket",
            },
            "distribution": Object {
              "Ref": "SiteDistribution",
            },
            "distributionPaths": Array [
              "/*",
            ],
            "sources": Array [
              Object {
                "aws-cdk-lib.aws_s3_deployment.Source.data": Array [
                  "index.html",
                  Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "Hello from ",
                        Object {
                          "Ref": "DomainName",
                        },
                      ],
                    ],
                  },
                ],
              },
              Object {
                "aws-cdk-lib.aws_s3_deployment.Source.data": Array [
                  "error.html",
                  "Woof woof! Something went wrong.",
                ],
              },
            ],
          },
          "Type": "aws-cdk-lib.aws_s3_deployment.BucketDeployment",
        },
        "SiteDistribution": Object {
          "Properties": Object {
            "certificate": Object {
              "Ref": "SiteCertificate",
            },
            "defaultBehavior": Object {
              "origin": Object {
                "aws-cdk-lib.aws_cloudfront_origins.S3Origin": Array [
                  Object {
                    "Ref": "SiteBucket",
                  },
                  Object {
                    "originAccessIdentity": Object {
                      "Ref": "CloudFrontOAI",
                    },
                  },
                ],
              },
            },
            "defaultRootObject": "index.html",
            "domainNames": Array [
              Object {
                "Ref": "DomainName",
              },
            ],
            "errorResponses": Array [
              Object {
                "httpStatus": 403,
                "responseHttpStatus": 403,
                "responsePagePath": "error.html",
                "ttl": Object {
                  "aws-cdk-lib.Duration.minutes": 30,
                },
              },
            ],
            "minimumProtocolVersion": "TLS_V1_2_2021",
          },
          "Type": "aws-cdk-lib.aws_cloudfront.Distribution",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;

exports[`vpc.json 1`] = `
TypedTemplate {
  "conditions": Map {},
  "mappings": Map {},
  "metadata": Map {},
  "outputs": Map {},
  "parameters": Map {},
  "resources": DependencyGraph {
    "_dependencies": Map {
      "VPC" => Set {},
    },
    "keys": Set {
      "VPC",
    },
    "nodes": Object {
      "VPC": Object {
        "dependsOn": Array [],
        "fqn": "aws-cdk-lib.aws_ec2.Vpc",
        "logicalId": "VPC",
        "namespace": "aws_ec2",
        "overrides": Array [],
        "props": Object {
          "fields": Object {},
          "type": "struct",
        },
        "tags": Array [],
        "type": "construct",
      },
    },
  },
  "template": Template {
    "conditions": Map {},
    "description": undefined,
    "mappings": Map {},
    "metadata": Map {},
    "outputs": Map {},
    "parameters": Map {},
    "resources": Map {
      "VPC" => Object {
        "call": Object {
          "fields": Object {},
          "type": "object",
        },
        "conditionName": undefined,
        "creationPolicy": undefined,
        "deletionPolicy": "Delete",
        "dependencies": Set {},
        "dependsOn": Set {},
        "metadata": Object {},
        "on": undefined,
        "overrides": Array [],
        "properties": Object {},
        "tags": Array [],
        "type": "aws-cdk-lib.aws_ec2.Vpc",
        "updatePolicy": undefined,
        "updateReplacePolicy": "Delete",
      },
    },
    "template": Object {
      "$schema": "../cdk.schema.json",
      "Resources": Object {
        "VPC": Object {
          "Type": "aws-cdk-lib.aws_ec2.Vpc",
        },
      },
    },
    "templateFormatVersion": undefined,
    "transform": Array [],
  },
  "transform": Array [],
}
`;
